
Reservoir_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048f4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  08004a94  08004a94  00005a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dc8  08004dc8  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004dc8  08004dc8  00005dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004dd0  08004dd0  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dd0  08004dd0  00005dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004dd4  08004dd4  00005dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004dd8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000005c  08004e34  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08004e34  000062b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cca6  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca9  00000000  00000000  00012d32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  000149e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009a8  00000000  00000000  00015630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001650e  00000000  00000000  00015fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de57  00000000  00000000  0002c4e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008da68  00000000  00000000  0003a33d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7da5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a1c  00000000  00000000  000c7de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000cb804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004a7c 	.word	0x08004a7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004a7c 	.word	0x08004a7c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b0a0      	sub	sp, #128	@ 0x80
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	char txd_message_buffer[128] = {0};
 8000586:	2300      	movs	r3, #0
 8000588:	603b      	str	r3, [r7, #0]
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	227c      	movs	r2, #124	@ 0x7c
 800058e:	2100      	movs	r1, #0
 8000590:	4618      	mov	r0, r3
 8000592:	f003 fdf3 	bl	800417c <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fdc5 	bl	8001124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f8a1 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f9c9 	bl	8000934 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a2:	f000 f973 	bl	800088c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005a6:	f000 f8fb 	bl	80007a0 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 80005aa:	f000 f999 	bl	80008e0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart6, &byte, 1); //Enable UART Interrupt
 80005ae:	2201      	movs	r2, #1
 80005b0:	4941      	ldr	r1, [pc, #260]	@ (80006b8 <main+0x138>)
 80005b2:	4842      	ldr	r0, [pc, #264]	@ (80006bc <main+0x13c>)
 80005b4:	f002 fd8b 	bl	80030ce <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(setup_complete == false){
 80005b8:	4b41      	ldr	r3, [pc, #260]	@ (80006c0 <main+0x140>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	f083 0301 	eor.w	r3, r3, #1
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d0f8      	beq.n	80005b8 <main+0x38>
		  //Print Statement
		  sprintf(txd_message_buffer, "SETUP MODE\n");
 80005c6:	463b      	mov	r3, r7
 80005c8:	493e      	ldr	r1, [pc, #248]	@ (80006c4 <main+0x144>)
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 fd32 	bl	8004034 <siprintf>
		  HAL_UART_Transmit(&huart6, (uint8_t*)txd_message_buffer, strlen(txd_message_buffer), HAL_MAX_DELAY);
 80005d0:	463b      	mov	r3, r7
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff fe04 	bl	80001e0 <strlen>
 80005d8:	4603      	mov	r3, r0
 80005da:	b29a      	uxth	r2, r3
 80005dc:	4639      	mov	r1, r7
 80005de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005e2:	4836      	ldr	r0, [pc, #216]	@ (80006bc <main+0x13c>)
 80005e4:	f002 fce8 	bl	8002fb8 <HAL_UART_Transmit>

		  //Print Statement
		  sprintf(txd_message_buffer, "Enter SETUP Parameters\n");
 80005e8:	463b      	mov	r3, r7
 80005ea:	4937      	ldr	r1, [pc, #220]	@ (80006c8 <main+0x148>)
 80005ec:	4618      	mov	r0, r3
 80005ee:	f003 fd21 	bl	8004034 <siprintf>
		  HAL_UART_Transmit(&huart6, (uint8_t*)txd_message_buffer, strlen(txd_message_buffer), HAL_MAX_DELAY);
 80005f2:	463b      	mov	r3, r7
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff fdf3 	bl	80001e0 <strlen>
 80005fa:	4603      	mov	r3, r0
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	4639      	mov	r1, r7
 8000600:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000604:	482d      	ldr	r0, [pc, #180]	@ (80006bc <main+0x13c>)
 8000606:	f002 fcd7 	bl	8002fb8 <HAL_UART_Transmit>


		  run_setup_process(); //if we have not done the setup process, do it.
 800060a:	f000 fa0f 	bl	8000a2c <run_setup_process>

		  //LED Flashing Logic
		  		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //Start the timer channel for the blinking LD2
 800060e:	2100      	movs	r1, #0
 8000610:	482e      	ldr	r0, [pc, #184]	@ (80006cc <main+0x14c>)
 8000612:	f001 fe9d 	bl	8002350 <HAL_TIM_PWM_Start>
		  		  sprintf(txd_message_buffer, "LED blinking started.\n"); //TEST to see if we get messsage of LED blinking or not.
 8000616:	463b      	mov	r3, r7
 8000618:	492d      	ldr	r1, [pc, #180]	@ (80006d0 <main+0x150>)
 800061a:	4618      	mov	r0, r3
 800061c:	f003 fd0a 	bl	8004034 <siprintf>
		  		  HAL_UART_Transmit(&huart6, (uint8_t *)txd_message_buffer, strlen(txd_message_buffer), HAL_MAX_DELAY);
 8000620:	463b      	mov	r3, r7
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff fddc 	bl	80001e0 <strlen>
 8000628:	4603      	mov	r3, r0
 800062a:	b29a      	uxth	r2, r3
 800062c:	4639      	mov	r1, r7
 800062e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000632:	4822      	ldr	r0, [pc, #136]	@ (80006bc <main+0x13c>)
 8000634:	f002 fcc0 	bl	8002fb8 <HAL_UART_Transmit>

		  //Tell User to press the Blue Button
		  sprintf(txd_message_buffer, "SETUP is done. Press Blue Button for RUN Mode");
 8000638:	463b      	mov	r3, r7
 800063a:	4926      	ldr	r1, [pc, #152]	@ (80006d4 <main+0x154>)
 800063c:	4618      	mov	r0, r3
 800063e:	f003 fcf9 	bl	8004034 <siprintf>
		  HAL_UART_Transmit(&huart6, (uint8_t*)txd_message_buffer, strlen(txd_message_buffer), HAL_MAX_DELAY);
 8000642:	463b      	mov	r3, r7
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff fdcb 	bl	80001e0 <strlen>
 800064a:	4603      	mov	r3, r0
 800064c:	b29a      	uxth	r2, r3
 800064e:	4639      	mov	r1, r7
 8000650:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000654:	4819      	ldr	r0, [pc, #100]	@ (80006bc <main+0x13c>)
 8000656:	f002 fcaf 	bl	8002fb8 <HAL_UART_Transmit>

		  //Polling for Blue Button
		  while(1){
			  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET){ //if active low
 800065a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800065e:	481e      	ldr	r0, [pc, #120]	@ (80006d8 <main+0x158>)
 8000660:	f001 f91e 	bl	80018a0 <HAL_GPIO_ReadPin>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d1f7      	bne.n	800065a <main+0xda>
				  HAL_Delay(50);
 800066a:	2032      	movs	r0, #50	@ 0x32
 800066c:	f000 fdcc 	bl	8001208 <HAL_Delay>
				  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET){ //if active low
 8000670:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000674:	4818      	ldr	r0, [pc, #96]	@ (80006d8 <main+0x158>)
 8000676:	f001 f913 	bl	80018a0 <HAL_GPIO_ReadPin>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1ec      	bne.n	800065a <main+0xda>
					  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1); // Stop blinking
 8000680:	2100      	movs	r1, #0
 8000682:	4812      	ldr	r0, [pc, #72]	@ (80006cc <main+0x14c>)
 8000684:	f001 ff14 	bl	80024b0 <HAL_TIM_PWM_Stop>

					  sprintf(txd_message_buffer, "Button Press Detected. Exiting Setup Mode.\n");
 8000688:	463b      	mov	r3, r7
 800068a:	4914      	ldr	r1, [pc, #80]	@ (80006dc <main+0x15c>)
 800068c:	4618      	mov	r0, r3
 800068e:	f003 fcd1 	bl	8004034 <siprintf>
					  HAL_UART_Transmit(&huart6, (uint8_t *)txd_message_buffer, strlen(txd_message_buffer), HAL_MAX_DELAY); //Tell user that we detected button press.
 8000692:	463b      	mov	r3, r7
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff fda3 	bl	80001e0 <strlen>
 800069a:	4603      	mov	r3, r0
 800069c:	b29a      	uxth	r2, r3
 800069e:	4639      	mov	r1, r7
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006a4:	4805      	ldr	r0, [pc, #20]	@ (80006bc <main+0x13c>)
 80006a6:	f002 fc87 	bl	8002fb8 <HAL_UART_Transmit>

					  HAL_Delay(2000);
 80006aa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006ae:	f000 fdab 	bl	8001208 <HAL_Delay>

					  //Function call here to do everything after button press.

					  break;
 80006b2:	bf00      	nop
	  if(setup_complete == false){
 80006b4:	e780      	b.n	80005b8 <main+0x38>
 80006b6:	bf00      	nop
 80006b8:	20000078 	.word	0x20000078
 80006bc:	2000010c 	.word	0x2000010c
 80006c0:	20000155 	.word	0x20000155
 80006c4:	08004a94 	.word	0x08004a94
 80006c8:	08004aa0 	.word	0x08004aa0
 80006cc:	2000007c 	.word	0x2000007c
 80006d0:	08004ab8 	.word	0x08004ab8
 80006d4:	08004ad0 	.word	0x08004ad0
 80006d8:	40020800 	.word	0x40020800
 80006dc:	08004b00 	.word	0x08004b00

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b094      	sub	sp, #80	@ 0x50
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 0320 	add.w	r3, r7, #32
 80006ea:	2230      	movs	r2, #48	@ 0x30
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f003 fd44 	bl	800417c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000704:	2300      	movs	r3, #0
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	4b23      	ldr	r3, [pc, #140]	@ (8000798 <SystemClock_Config+0xb8>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800070c:	4a22      	ldr	r2, [pc, #136]	@ (8000798 <SystemClock_Config+0xb8>)
 800070e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000712:	6413      	str	r3, [r2, #64]	@ 0x40
 8000714:	4b20      	ldr	r3, [pc, #128]	@ (8000798 <SystemClock_Config+0xb8>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000718:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000720:	2300      	movs	r3, #0
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	4b1d      	ldr	r3, [pc, #116]	@ (800079c <SystemClock_Config+0xbc>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800072c:	4a1b      	ldr	r2, [pc, #108]	@ (800079c <SystemClock_Config+0xbc>)
 800072e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	4b19      	ldr	r3, [pc, #100]	@ (800079c <SystemClock_Config+0xbc>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000740:	2302      	movs	r3, #2
 8000742:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000744:	2301      	movs	r3, #1
 8000746:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000748:	2310      	movs	r3, #16
 800074a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800074c:	2300      	movs	r3, #0
 800074e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000750:	f107 0320 	add.w	r3, r7, #32
 8000754:	4618      	mov	r0, r3
 8000756:	f001 f8bb 	bl	80018d0 <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000760:	f000 fb2a 	bl	8000db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000764:	230f      	movs	r3, #15
 8000766:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000768:	2300      	movs	r3, #0
 800076a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f001 fb1e 	bl	8001dc0 <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800078a:	f000 fb15 	bl	8000db8 <Error_Handler>
  }
}
 800078e:	bf00      	nop
 8000790:	3750      	adds	r7, #80	@ 0x50
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08e      	sub	sp, #56	@ 0x38
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b4:	f107 0320 	add.w	r3, r7, #32
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
 80007cc:	615a      	str	r2, [r3, #20]
 80007ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000888 <MX_TIM2_Init+0xe8>)
 80007d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000-1;
 80007d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000888 <MX_TIM2_Init+0xe8>)
 80007da:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80007de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e0:	4b29      	ldr	r3, [pc, #164]	@ (8000888 <MX_TIM2_Init+0xe8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 80007e6:	4b28      	ldr	r3, [pc, #160]	@ (8000888 <MX_TIM2_Init+0xe8>)
 80007e8:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80007ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ee:	4b26      	ldr	r3, [pc, #152]	@ (8000888 <MX_TIM2_Init+0xe8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007f4:	4b24      	ldr	r3, [pc, #144]	@ (8000888 <MX_TIM2_Init+0xe8>)
 80007f6:	2280      	movs	r2, #128	@ 0x80
 80007f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007fa:	4823      	ldr	r0, [pc, #140]	@ (8000888 <MX_TIM2_Init+0xe8>)
 80007fc:	f001 fd00 	bl	8002200 <HAL_TIM_Base_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000806:	f000 fad7 	bl	8000db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800080a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800080e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000810:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000814:	4619      	mov	r1, r3
 8000816:	481c      	ldr	r0, [pc, #112]	@ (8000888 <MX_TIM2_Init+0xe8>)
 8000818:	f001 ff70 	bl	80026fc <HAL_TIM_ConfigClockSource>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000822:	f000 fac9 	bl	8000db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000826:	4818      	ldr	r0, [pc, #96]	@ (8000888 <MX_TIM2_Init+0xe8>)
 8000828:	f001 fd39 	bl	800229e <HAL_TIM_PWM_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000832:	f000 fac1 	bl	8000db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800083e:	f107 0320 	add.w	r3, r7, #32
 8000842:	4619      	mov	r1, r3
 8000844:	4810      	ldr	r0, [pc, #64]	@ (8000888 <MX_TIM2_Init+0xe8>)
 8000846:	f002 faf9 	bl	8002e3c <HAL_TIMEx_MasterConfigSynchronization>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000850:	f000 fab2 	bl	8000db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000854:	2360      	movs	r3, #96	@ 0x60
 8000856:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250-1;
 8000858:	23f9      	movs	r3, #249	@ 0xf9
 800085a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2200      	movs	r2, #0
 8000868:	4619      	mov	r1, r3
 800086a:	4807      	ldr	r0, [pc, #28]	@ (8000888 <MX_TIM2_Init+0xe8>)
 800086c:	f001 fe84 	bl	8002578 <HAL_TIM_PWM_ConfigChannel>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000876:	f000 fa9f 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800087a:	4803      	ldr	r0, [pc, #12]	@ (8000888 <MX_TIM2_Init+0xe8>)
 800087c:	f000 faea 	bl	8000e54 <HAL_TIM_MspPostInit>

}
 8000880:	bf00      	nop
 8000882:	3738      	adds	r7, #56	@ 0x38
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	2000007c 	.word	0x2000007c

0800088c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000890:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 8000892:	4a12      	ldr	r2, [pc, #72]	@ (80008dc <MX_USART2_UART_Init+0x50>)
 8000894:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000896:	4b10      	ldr	r3, [pc, #64]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 8000898:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800089c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b0:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008bc:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	@ (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008c4:	f002 fb28 	bl	8002f18 <HAL_UART_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ce:	f000 fa73 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200000c4 	.word	0x200000c4
 80008dc:	40004400 	.word	0x40004400

080008e0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80008e4:	4b11      	ldr	r3, [pc, #68]	@ (800092c <MX_USART6_UART_Init+0x4c>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	@ (8000930 <MX_USART6_UART_Init+0x50>)
 80008e8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80008ea:	4b10      	ldr	r3, [pc, #64]	@ (800092c <MX_USART6_UART_Init+0x4c>)
 80008ec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80008f0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <MX_USART6_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <MX_USART6_UART_Init+0x4c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <MX_USART6_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000904:	4b09      	ldr	r3, [pc, #36]	@ (800092c <MX_USART6_UART_Init+0x4c>)
 8000906:	220c      	movs	r2, #12
 8000908:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090a:	4b08      	ldr	r3, [pc, #32]	@ (800092c <MX_USART6_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000910:	4b06      	ldr	r3, [pc, #24]	@ (800092c <MX_USART6_UART_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	@ (800092c <MX_USART6_UART_Init+0x4c>)
 8000918:	f002 fafe 	bl	8002f18 <HAL_UART_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000922:	f000 fa49 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000010c 	.word	0x2000010c
 8000930:	40011400 	.word	0x40011400

08000934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	@ 0x28
 8000938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	4b23      	ldr	r3, [pc, #140]	@ (80009dc <MX_GPIO_Init+0xa8>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a22      	ldr	r2, [pc, #136]	@ (80009dc <MX_GPIO_Init+0xa8>)
 8000954:	f043 0304 	orr.w	r3, r3, #4
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b20      	ldr	r3, [pc, #128]	@ (80009dc <MX_GPIO_Init+0xa8>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0304 	and.w	r3, r3, #4
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	4b1c      	ldr	r3, [pc, #112]	@ (80009dc <MX_GPIO_Init+0xa8>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a1b      	ldr	r2, [pc, #108]	@ (80009dc <MX_GPIO_Init+0xa8>)
 8000970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b19      	ldr	r3, [pc, #100]	@ (80009dc <MX_GPIO_Init+0xa8>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <MX_GPIO_Init+0xa8>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a14      	ldr	r2, [pc, #80]	@ (80009dc <MX_GPIO_Init+0xa8>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <MX_GPIO_Init+0xa8>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <MX_GPIO_Init+0xa8>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	4a0d      	ldr	r2, [pc, #52]	@ (80009dc <MX_GPIO_Init+0xa8>)
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ae:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <MX_GPIO_Init+0xa8>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	4804      	ldr	r0, [pc, #16]	@ (80009e0 <MX_GPIO_Init+0xac>)
 80009d0:	f000 fde2 	bl	8001598 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d4:	bf00      	nop
 80009d6:	3728      	adds	r7, #40	@ 0x28
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40020800 	.word	0x40020800

080009e4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART6){
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0a      	ldr	r2, [pc, #40]	@ (8000a1c <HAL_UART_RxCpltCallback+0x38>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d10d      	bne.n	8000a12 <HAL_UART_RxCpltCallback+0x2e>
		HAL_UART_Transmit(&huart6, &byte, 1, 100);
 80009f6:	2364      	movs	r3, #100	@ 0x64
 80009f8:	2201      	movs	r2, #1
 80009fa:	4909      	ldr	r1, [pc, #36]	@ (8000a20 <HAL_UART_RxCpltCallback+0x3c>)
 80009fc:	4809      	ldr	r0, [pc, #36]	@ (8000a24 <HAL_UART_RxCpltCallback+0x40>)
 80009fe:	f002 fadb 	bl	8002fb8 <HAL_UART_Transmit>
		rcv_intpt_flag = 1;
 8000a02:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <HAL_UART_RxCpltCallback+0x44>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart6, &byte, 1); //re-enable interrupt
 8000a08:	2201      	movs	r2, #1
 8000a0a:	4905      	ldr	r1, [pc, #20]	@ (8000a20 <HAL_UART_RxCpltCallback+0x3c>)
 8000a0c:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <HAL_UART_RxCpltCallback+0x40>)
 8000a0e:	f002 fb5e 	bl	80030ce <HAL_UART_Receive_IT>
	}
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40011400 	.word	0x40011400
 8000a20:	20000078 	.word	0x20000078
 8000a24:	2000010c 	.word	0x2000010c
 8000a28:	20000154 	.word	0x20000154

08000a2c <run_setup_process>:

void run_setup_process(void){
 8000a2c:	b5b0      	push	{r4, r5, r7, lr}
 8000a2e:	b09c      	sub	sp, #112	@ 0x70
 8000a30:	af04      	add	r7, sp, #16
	char txd_message_buffer[64] = {0};
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	223c      	movs	r2, #60	@ 0x3c
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f003 fb9c 	bl	800417c <memset>
	char rx_buffer[16] = {0};
 8000a44:	2300      	movs	r3, #0
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
	int index = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	65fb      	str	r3, [r7, #92]	@ 0x5c

	//Iterate through all the pipelines.
	for(int i = 0; i < NUM_PIPELINES; i++){
 8000a56:	2300      	movs	r3, #0
 8000a58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000a5a:	e089      	b.n	8000b70 <run_setup_process+0x144>

		//Ask user to select Pipeline from 0-3
		sprintf(txd_message_buffer, "PIPELINE (options: 0 to 3):\n");
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	49a7      	ldr	r1, [pc, #668]	@ (8000d00 <run_setup_process+0x2d4>)
 8000a62:	4618      	mov	r0, r3
 8000a64:	f003 fae6 	bl	8004034 <siprintf>
		HAL_UART_Transmit(&huart6, (uint8_t*)txd_message_buffer, strlen(txd_message_buffer), HAL_MAX_DELAY);
 8000a68:	f107 0310 	add.w	r3, r7, #16
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fbb7 	bl	80001e0 <strlen>
 8000a72:	4603      	mov	r3, r0
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	f107 0110 	add.w	r1, r7, #16
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a7e:	48a1      	ldr	r0, [pc, #644]	@ (8000d04 <run_setup_process+0x2d8>)
 8000a80:	f002 fa9a 	bl	8002fb8 <HAL_UART_Transmit>

		while(1){
			if(rcv_intpt_flag == 1){
 8000a84:	4ba0      	ldr	r3, [pc, #640]	@ (8000d08 <run_setup_process+0x2dc>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d1fb      	bne.n	8000a84 <run_setup_process+0x58>
				rcv_intpt_flag = 0;
 8000a8c:	4b9e      	ldr	r3, [pc, #632]	@ (8000d08 <run_setup_process+0x2dc>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	701a      	strb	r2, [r3, #0]
				if(byte == '\r'){ //If user pressed the enter key.
 8000a92:	4b9e      	ldr	r3, [pc, #632]	@ (8000d0c <run_setup_process+0x2e0>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b0d      	cmp	r3, #13
 8000a98:	d124      	bne.n	8000ae4 <run_setup_process+0xb8>
					rx_buffer[index] = '\0'; //Null terminate the string.
 8000a9a:	463a      	mov	r2, r7
 8000a9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a9e:	4413      	add	r3, r2
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
					pipeline_by_user = atoi(rx_buffer); //convert to integer
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f003 fa8c 	bl	8003fc4 <atoi>
 8000aac:	4603      	mov	r3, r0
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	4b97      	ldr	r3, [pc, #604]	@ (8000d10 <run_setup_process+0x2e4>)
 8000ab2:	701a      	strb	r2, [r3, #0]
					index = 0; //reset the index
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	65fb      	str	r3, [r7, #92]	@ 0x5c
					break; //exit look
 8000ab8:	bf00      	nop
				}
			}
		}

		//Ask user to set the Pump PWM for given Pipeline
		sprintf(txd_message_buffer, "PUMP PWM (options: 0 to 3):\n");
 8000aba:	f107 0310 	add.w	r3, r7, #16
 8000abe:	4995      	ldr	r1, [pc, #596]	@ (8000d14 <run_setup_process+0x2e8>)
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f003 fab7 	bl	8004034 <siprintf>
		HAL_UART_Transmit(&huart6, (uint8_t*)txd_message_buffer, strlen(txd_message_buffer), HAL_MAX_DELAY);
 8000ac6:	f107 0310 	add.w	r3, r7, #16
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fb88 	bl	80001e0 <strlen>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	f107 0110 	add.w	r1, r7, #16
 8000ad8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000adc:	4889      	ldr	r0, [pc, #548]	@ (8000d04 <run_setup_process+0x2d8>)
 8000ade:	f002 fa6b 	bl	8002fb8 <HAL_UART_Transmit>
 8000ae2:	e00f      	b.n	8000b04 <run_setup_process+0xd8>
					index++;
 8000ae4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	65fb      	str	r3, [r7, #92]	@ 0x5c
					rx_buffer[index] = byte; //store recieved character
 8000aea:	4b88      	ldr	r3, [pc, #544]	@ (8000d0c <run_setup_process+0x2e0>)
 8000aec:	7819      	ldrb	r1, [r3, #0]
 8000aee:	463a      	mov	r2, r7
 8000af0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000af2:	4413      	add	r3, r2
 8000af4:	460a      	mov	r2, r1
 8000af6:	701a      	strb	r2, [r3, #0]
					if(index <= sizeof(rx_buffer)){
 8000af8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000afa:	2b10      	cmp	r3, #16
 8000afc:	d8c2      	bhi.n	8000a84 <run_setup_process+0x58>
						index = sizeof(rx_buffer) - 1; //prevent overflow.
 8000afe:	230f      	movs	r3, #15
 8000b00:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if(rcv_intpt_flag == 1){
 8000b02:	e7bf      	b.n	8000a84 <run_setup_process+0x58>

		while(1){
			if(rcv_intpt_flag == 1){
 8000b04:	4b80      	ldr	r3, [pc, #512]	@ (8000d08 <run_setup_process+0x2dc>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d1fb      	bne.n	8000b04 <run_setup_process+0xd8>
				rcv_intpt_flag = 0;
 8000b0c:	4b7e      	ldr	r3, [pc, #504]	@ (8000d08 <run_setup_process+0x2dc>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	701a      	strb	r2, [r3, #0]
				if(byte == '\r'){ //If user pressed the enter key.
 8000b12:	4b7e      	ldr	r3, [pc, #504]	@ (8000d0c <run_setup_process+0x2e0>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b0d      	cmp	r3, #13
 8000b18:	d117      	bne.n	8000b4a <run_setup_process+0x11e>
					rx_buffer[index] = '\0'; //Null terminate the string.
 8000b1a:	463a      	mov	r2, r7
 8000b1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b1e:	4413      	add	r3, r2
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
					pipelines[pipeline_by_user].pwm = atoi(rx_buffer); //convert to integer
 8000b24:	463b      	mov	r3, r7
 8000b26:	4618      	mov	r0, r3
 8000b28:	f003 fa4c 	bl	8003fc4 <atoi>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	4b78      	ldr	r3, [pc, #480]	@ (8000d10 <run_setup_process+0x2e4>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	4619      	mov	r1, r3
 8000b34:	b2d0      	uxtb	r0, r2
 8000b36:	4a78      	ldr	r2, [pc, #480]	@ (8000d18 <run_setup_process+0x2ec>)
 8000b38:	460b      	mov	r3, r1
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	440b      	add	r3, r1
 8000b3e:	4413      	add	r3, r2
 8000b40:	4602      	mov	r2, r0
 8000b42:	701a      	strb	r2, [r3, #0]
					index = 0; //reset the index
 8000b44:	2300      	movs	r3, #0
 8000b46:	65fb      	str	r3, [r7, #92]	@ 0x5c
					break; //exit look
 8000b48:	e00f      	b.n	8000b6a <run_setup_process+0x13e>
				} else{
					index++;
 8000b4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
					rx_buffer[index] = byte; //store recieved character
 8000b50:	4b6e      	ldr	r3, [pc, #440]	@ (8000d0c <run_setup_process+0x2e0>)
 8000b52:	7819      	ldrb	r1, [r3, #0]
 8000b54:	463a      	mov	r2, r7
 8000b56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b58:	4413      	add	r3, r2
 8000b5a:	460a      	mov	r2, r1
 8000b5c:	701a      	strb	r2, [r3, #0]
					if(index <= sizeof(rx_buffer)){
 8000b5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b60:	2b10      	cmp	r3, #16
 8000b62:	d8cf      	bhi.n	8000b04 <run_setup_process+0xd8>
						index = sizeof(rx_buffer) - 1; //prevent overflow.
 8000b64:	230f      	movs	r3, #15
 8000b66:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if(rcv_intpt_flag == 1){
 8000b68:	e7cc      	b.n	8000b04 <run_setup_process+0xd8>
	for(int i = 0; i < NUM_PIPELINES; i++){
 8000b6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000b70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	f77f af72 	ble.w	8000a5c <run_setup_process+0x30>
			}
		}
	}

	//Iterate through all the pipelines to set Times
	for(int i = 0; i < NUM_PIPELINES; i++){
 8000b78:	2300      	movs	r3, #0
 8000b7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8000b7c:	e091      	b.n	8000ca2 <run_setup_process+0x276>
		sprintf(txd_message_buffer, "Pipeline %d  Pump FIRST HOUR (options: 00 to 23):\n", i);
 8000b7e:	f107 0310 	add.w	r3, r7, #16
 8000b82:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000b84:	4965      	ldr	r1, [pc, #404]	@ (8000d1c <run_setup_process+0x2f0>)
 8000b86:	4618      	mov	r0, r3
 8000b88:	f003 fa54 	bl	8004034 <siprintf>
		HAL_UART_Transmit(&huart6, (uint8_t*)txd_message_buffer, strlen(txd_message_buffer), HAL_MAX_DELAY);
 8000b8c:	f107 0310 	add.w	r3, r7, #16
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fb25 	bl	80001e0 <strlen>
 8000b96:	4603      	mov	r3, r0
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	f107 0110 	add.w	r1, r7, #16
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ba2:	4858      	ldr	r0, [pc, #352]	@ (8000d04 <run_setup_process+0x2d8>)
 8000ba4:	f002 fa08 	bl	8002fb8 <HAL_UART_Transmit>

		while(1){
			if(rcv_intpt_flag == 1){
 8000ba8:	4b57      	ldr	r3, [pc, #348]	@ (8000d08 <run_setup_process+0x2dc>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d1fb      	bne.n	8000ba8 <run_setup_process+0x17c>
				rcv_intpt_flag = 0;
 8000bb0:	4b55      	ldr	r3, [pc, #340]	@ (8000d08 <run_setup_process+0x2dc>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
				if(byte == '\r'){ //If user pressed the enter key.
 8000bb6:	4b55      	ldr	r3, [pc, #340]	@ (8000d0c <run_setup_process+0x2e0>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b0d      	cmp	r3, #13
 8000bbc:	d12c      	bne.n	8000c18 <run_setup_process+0x1ec>
					rx_buffer[index] = '\0'; //Null terminate the string.
 8000bbe:	463a      	mov	r2, r7
 8000bc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000bc2:	4413      	add	r3, r2
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
					pipelines[i].first_hour = atoi(rx_buffer); //convert to integer
 8000bc8:	463b      	mov	r3, r7
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f003 f9fa 	bl	8003fc4 <atoi>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	b2d8      	uxtb	r0, r3
 8000bd4:	4950      	ldr	r1, [pc, #320]	@ (8000d18 <run_setup_process+0x2ec>)
 8000bd6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000bd8:	4613      	mov	r3, r2
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	4413      	add	r3, r2
 8000bde:	440b      	add	r3, r1
 8000be0:	3301      	adds	r3, #1
 8000be2:	4602      	mov	r2, r0
 8000be4:	701a      	strb	r2, [r3, #0]
					index = 0; //reset the index
 8000be6:	2300      	movs	r3, #0
 8000be8:	65fb      	str	r3, [r7, #92]	@ 0x5c
					break; //exit look
 8000bea:	bf00      	nop
					}
				}
			}
		}

		sprintf(txd_message_buffer, "Pipeline %d  Pump LAST HOUR (options: 00 to 23):\n", i);
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000bf2:	494b      	ldr	r1, [pc, #300]	@ (8000d20 <run_setup_process+0x2f4>)
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f003 fa1d 	bl	8004034 <siprintf>
		HAL_UART_Transmit(&huart6, (uint8_t*)txd_message_buffer, strlen(txd_message_buffer), HAL_MAX_DELAY);
 8000bfa:	f107 0310 	add.w	r3, r7, #16
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff faee 	bl	80001e0 <strlen>
 8000c04:	4603      	mov	r3, r0
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	f107 0110 	add.w	r1, r7, #16
 8000c0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c10:	483c      	ldr	r0, [pc, #240]	@ (8000d04 <run_setup_process+0x2d8>)
 8000c12:	f002 f9d1 	bl	8002fb8 <HAL_UART_Transmit>
 8000c16:	e00f      	b.n	8000c38 <run_setup_process+0x20c>
					index++;
 8000c18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
					rx_buffer[index] = byte; //store recieved character
 8000c1e:	4b3b      	ldr	r3, [pc, #236]	@ (8000d0c <run_setup_process+0x2e0>)
 8000c20:	7819      	ldrb	r1, [r3, #0]
 8000c22:	463a      	mov	r2, r7
 8000c24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c26:	4413      	add	r3, r2
 8000c28:	460a      	mov	r2, r1
 8000c2a:	701a      	strb	r2, [r3, #0]
					if(index <= sizeof(rx_buffer)){
 8000c2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c2e:	2b10      	cmp	r3, #16
 8000c30:	d8ba      	bhi.n	8000ba8 <run_setup_process+0x17c>
						index = sizeof(rx_buffer) - 1; //prevent overflow.
 8000c32:	230f      	movs	r3, #15
 8000c34:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if(rcv_intpt_flag == 1){
 8000c36:	e7b7      	b.n	8000ba8 <run_setup_process+0x17c>

		while(1){
			if(rcv_intpt_flag == 1){
 8000c38:	4b33      	ldr	r3, [pc, #204]	@ (8000d08 <run_setup_process+0x2dc>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d1fb      	bne.n	8000c38 <run_setup_process+0x20c>
				rcv_intpt_flag = 0;
 8000c40:	4b31      	ldr	r3, [pc, #196]	@ (8000d08 <run_setup_process+0x2dc>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
				if(byte == '\r'){ //If user pressed the enter key.
 8000c46:	4b31      	ldr	r3, [pc, #196]	@ (8000d0c <run_setup_process+0x2e0>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b0d      	cmp	r3, #13
 8000c4c:	d116      	bne.n	8000c7c <run_setup_process+0x250>
					rx_buffer[index] = '\0'; //Null terminate the string.
 8000c4e:	463a      	mov	r2, r7
 8000c50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c52:	4413      	add	r3, r2
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
					pipelines[i].last_hour = atoi(rx_buffer); //convert to integer
 8000c58:	463b      	mov	r3, r7
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f003 f9b2 	bl	8003fc4 <atoi>
 8000c60:	4603      	mov	r3, r0
 8000c62:	b2d8      	uxtb	r0, r3
 8000c64:	492c      	ldr	r1, [pc, #176]	@ (8000d18 <run_setup_process+0x2ec>)
 8000c66:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000c68:	4613      	mov	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	440b      	add	r3, r1
 8000c70:	3302      	adds	r3, #2
 8000c72:	4602      	mov	r2, r0
 8000c74:	701a      	strb	r2, [r3, #0]
					index = 0; //reset the index
 8000c76:	2300      	movs	r3, #0
 8000c78:	65fb      	str	r3, [r7, #92]	@ 0x5c
					break; //exit look
 8000c7a:	e00f      	b.n	8000c9c <run_setup_process+0x270>
				} else{
					index++;
 8000c7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c7e:	3301      	adds	r3, #1
 8000c80:	65fb      	str	r3, [r7, #92]	@ 0x5c
					rx_buffer[index] = byte; //store recieved character
 8000c82:	4b22      	ldr	r3, [pc, #136]	@ (8000d0c <run_setup_process+0x2e0>)
 8000c84:	7819      	ldrb	r1, [r3, #0]
 8000c86:	463a      	mov	r2, r7
 8000c88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c8a:	4413      	add	r3, r2
 8000c8c:	460a      	mov	r2, r1
 8000c8e:	701a      	strb	r2, [r3, #0]
					if(index <= sizeof(rx_buffer)){
 8000c90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c92:	2b10      	cmp	r3, #16
 8000c94:	d8d0      	bhi.n	8000c38 <run_setup_process+0x20c>
						index = sizeof(rx_buffer) - 1; //prevent overflow.
 8000c96:	230f      	movs	r3, #15
 8000c98:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if(rcv_intpt_flag == 1){
 8000c9a:	e7cd      	b.n	8000c38 <run_setup_process+0x20c>
	for(int i = 0; i < NUM_PIPELINES; i++){
 8000c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	657b      	str	r3, [r7, #84]	@ 0x54
 8000ca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ca4:	2b03      	cmp	r3, #3
 8000ca6:	f77f af6a 	ble.w	8000b7e <run_setup_process+0x152>
				}
			}
		}
	}

	sprintf(txd_message_buffer, "Printing SETUP Parameters\n\n");
 8000caa:	f107 0310 	add.w	r3, r7, #16
 8000cae:	491d      	ldr	r1, [pc, #116]	@ (8000d24 <run_setup_process+0x2f8>)
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f003 f9bf 	bl	8004034 <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*)txd_message_buffer, strlen(txd_message_buffer), HAL_MAX_DELAY);
 8000cb6:	f107 0310 	add.w	r3, r7, #16
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fa90 	bl	80001e0 <strlen>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	b29a      	uxth	r2, r3
 8000cc4:	f107 0110 	add.w	r1, r7, #16
 8000cc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ccc:	480d      	ldr	r0, [pc, #52]	@ (8000d04 <run_setup_process+0x2d8>)
 8000cce:	f002 f973 	bl	8002fb8 <HAL_UART_Transmit>

	//ADD PRINT FOR CURRENT WALL CLOCK HOUR
	sprintf(txd_message_buffer, "ADD LOGIC FOR WALL CLOCK HOUR PRINT USING VARIABLE OR SOMETHING\n");
 8000cd2:	f107 0310 	add.w	r3, r7, #16
 8000cd6:	4914      	ldr	r1, [pc, #80]	@ (8000d28 <run_setup_process+0x2fc>)
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f003 f9ab 	bl	8004034 <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*)txd_message_buffer, strlen(txd_message_buffer), HAL_MAX_DELAY);
 8000cde:	f107 0310 	add.w	r3, r7, #16
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fa7c 	bl	80001e0 <strlen>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	f107 0110 	add.w	r1, r7, #16
 8000cf0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cf4:	4803      	ldr	r0, [pc, #12]	@ (8000d04 <run_setup_process+0x2d8>)
 8000cf6:	f002 f95f 	bl	8002fb8 <HAL_UART_Transmit>

	//Print all Pipeline Data
	for(int i = 0; i < NUM_PIPELINES; i++){
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	653b      	str	r3, [r7, #80]	@ 0x50
 8000cfe:	e049      	b.n	8000d94 <run_setup_process+0x368>
 8000d00:	08004b2c 	.word	0x08004b2c
 8000d04:	2000010c 	.word	0x2000010c
 8000d08:	20000154 	.word	0x20000154
 8000d0c:	20000078 	.word	0x20000078
 8000d10:	20000156 	.word	0x20000156
 8000d14:	08004b4c 	.word	0x08004b4c
 8000d18:	20000158 	.word	0x20000158
 8000d1c:	08004b6c 	.word	0x08004b6c
 8000d20:	08004ba0 	.word	0x08004ba0
 8000d24:	08004bd4 	.word	0x08004bd4
 8000d28:	08004bf0 	.word	0x08004bf0
		snprintf(txd_message_buffer, sizeof(txd_message_buffer),
		         "PIPELINE: %d   Pump PWM: %d   Pump FIRST HOUR: %d   Pump LAST HOUR %d\n",
		         i, pipelines[i].pwm, pipelines[i].first_hour, pipelines[i].last_hour);
 8000d2c:	491e      	ldr	r1, [pc, #120]	@ (8000da8 <run_setup_process+0x37c>)
 8000d2e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000d30:	4613      	mov	r3, r2
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	4413      	add	r3, r2
 8000d36:	440b      	add	r3, r1
 8000d38:	781b      	ldrb	r3, [r3, #0]
		snprintf(txd_message_buffer, sizeof(txd_message_buffer),
 8000d3a:	461c      	mov	r4, r3
		         i, pipelines[i].pwm, pipelines[i].first_hour, pipelines[i].last_hour);
 8000d3c:	491a      	ldr	r1, [pc, #104]	@ (8000da8 <run_setup_process+0x37c>)
 8000d3e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000d40:	4613      	mov	r3, r2
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	4413      	add	r3, r2
 8000d46:	440b      	add	r3, r1
 8000d48:	3301      	adds	r3, #1
 8000d4a:	781b      	ldrb	r3, [r3, #0]
		snprintf(txd_message_buffer, sizeof(txd_message_buffer),
 8000d4c:	461d      	mov	r5, r3
		         i, pipelines[i].pwm, pipelines[i].first_hour, pipelines[i].last_hour);
 8000d4e:	4916      	ldr	r1, [pc, #88]	@ (8000da8 <run_setup_process+0x37c>)
 8000d50:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000d52:	4613      	mov	r3, r2
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	4413      	add	r3, r2
 8000d58:	440b      	add	r3, r1
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	781b      	ldrb	r3, [r3, #0]
		snprintf(txd_message_buffer, sizeof(txd_message_buffer),
 8000d5e:	f107 0010 	add.w	r0, r7, #16
 8000d62:	9302      	str	r3, [sp, #8]
 8000d64:	9501      	str	r5, [sp, #4]
 8000d66:	9400      	str	r4, [sp, #0]
 8000d68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000d6a:	4a10      	ldr	r2, [pc, #64]	@ (8000dac <run_setup_process+0x380>)
 8000d6c:	2140      	movs	r1, #64	@ 0x40
 8000d6e:	f003 f92d 	bl	8003fcc <sniprintf>
		HAL_UART_Transmit(&huart6, (uint8_t*)txd_message_buffer, strlen(txd_message_buffer), HAL_MAX_DELAY);
 8000d72:	f107 0310 	add.w	r3, r7, #16
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fa32 	bl	80001e0 <strlen>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	f107 0110 	add.w	r1, r7, #16
 8000d84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d88:	4809      	ldr	r0, [pc, #36]	@ (8000db0 <run_setup_process+0x384>)
 8000d8a:	f002 f915 	bl	8002fb8 <HAL_UART_Transmit>
	for(int i = 0; i < NUM_PIPELINES; i++){
 8000d8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000d90:	3301      	adds	r3, #1
 8000d92:	653b      	str	r3, [r7, #80]	@ 0x50
 8000d94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000d96:	2b03      	cmp	r3, #3
 8000d98:	ddc8      	ble.n	8000d2c <run_setup_process+0x300>

	}

	setup_complete = true;
 8000d9a:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <run_setup_process+0x388>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	701a      	strb	r2, [r3, #0]
}
 8000da0:	bf00      	nop
 8000da2:	3760      	adds	r7, #96	@ 0x60
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bdb0      	pop	{r4, r5, r7, pc}
 8000da8:	20000158 	.word	0x20000158
 8000dac:	08004c34 	.word	0x08004c34
 8000db0:	2000010c 	.word	0x2000010c
 8000db4:	20000155 	.word	0x20000155

08000db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dbc:	b672      	cpsid	i
}
 8000dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <Error_Handler+0x8>

08000dc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	4b10      	ldr	r3, [pc, #64]	@ (8000e10 <HAL_MspInit+0x4c>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd2:	4a0f      	ldr	r2, [pc, #60]	@ (8000e10 <HAL_MspInit+0x4c>)
 8000dd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dda:	4b0d      	ldr	r3, [pc, #52]	@ (8000e10 <HAL_MspInit+0x4c>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	4b09      	ldr	r3, [pc, #36]	@ (8000e10 <HAL_MspInit+0x4c>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dee:	4a08      	ldr	r2, [pc, #32]	@ (8000e10 <HAL_MspInit+0x4c>)
 8000df0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000df4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000df6:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <HAL_MspInit+0x4c>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e02:	2007      	movs	r0, #7
 8000e04:	f000 faf4 	bl	80013f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40023800 	.word	0x40023800

08000e14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e24:	d10d      	bne.n	8000e42 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b09      	ldr	r3, [pc, #36]	@ (8000e50 <HAL_TIM_Base_MspInit+0x3c>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2e:	4a08      	ldr	r2, [pc, #32]	@ (8000e50 <HAL_TIM_Base_MspInit+0x3c>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e36:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <HAL_TIM_Base_MspInit+0x3c>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000e42:	bf00      	nop
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800

08000e54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e74:	d11d      	bne.n	8000eb2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	4b10      	ldr	r3, [pc, #64]	@ (8000ebc <HAL_TIM_MspPostInit+0x68>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000ebc <HAL_TIM_MspPostInit+0x68>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b0d      	ldr	r3, [pc, #52]	@ (8000ebc <HAL_TIM_MspPostInit+0x68>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e92:	2320      	movs	r3, #32
 8000e94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4804      	ldr	r0, [pc, #16]	@ (8000ec0 <HAL_TIM_MspPostInit+0x6c>)
 8000eae:	f000 fb73 	bl	8001598 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3720      	adds	r7, #32
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020000 	.word	0x40020000

08000ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08c      	sub	sp, #48	@ 0x30
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 031c 	add.w	r3, r7, #28
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a36      	ldr	r2, [pc, #216]	@ (8000fbc <HAL_UART_MspInit+0xf8>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d12c      	bne.n	8000f40 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
 8000eea:	4b35      	ldr	r3, [pc, #212]	@ (8000fc0 <HAL_UART_MspInit+0xfc>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eee:	4a34      	ldr	r2, [pc, #208]	@ (8000fc0 <HAL_UART_MspInit+0xfc>)
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ef6:	4b32      	ldr	r3, [pc, #200]	@ (8000fc0 <HAL_UART_MspInit+0xfc>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000efe:	61bb      	str	r3, [r7, #24]
 8000f00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc0 <HAL_UART_MspInit+0xfc>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	4a2d      	ldr	r2, [pc, #180]	@ (8000fc0 <HAL_UART_MspInit+0xfc>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f12:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc0 <HAL_UART_MspInit+0xfc>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f1e:	230c      	movs	r3, #12
 8000f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f2e:	2307      	movs	r3, #7
 8000f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 031c 	add.w	r3, r7, #28
 8000f36:	4619      	mov	r1, r3
 8000f38:	4822      	ldr	r0, [pc, #136]	@ (8000fc4 <HAL_UART_MspInit+0x100>)
 8000f3a:	f000 fb2d 	bl	8001598 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000f3e:	e039      	b.n	8000fb4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART6)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a20      	ldr	r2, [pc, #128]	@ (8000fc8 <HAL_UART_MspInit+0x104>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d134      	bne.n	8000fb4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc0 <HAL_UART_MspInit+0xfc>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f52:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc0 <HAL_UART_MspInit+0xfc>)
 8000f54:	f043 0320 	orr.w	r3, r3, #32
 8000f58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f5a:	4b19      	ldr	r3, [pc, #100]	@ (8000fc0 <HAL_UART_MspInit+0xfc>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5e:	f003 0320 	and.w	r3, r3, #32
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	4b15      	ldr	r3, [pc, #84]	@ (8000fc0 <HAL_UART_MspInit+0xfc>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	4a14      	ldr	r2, [pc, #80]	@ (8000fc0 <HAL_UART_MspInit+0xfc>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f76:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <HAL_UART_MspInit+0xfc>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f82:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f90:	2303      	movs	r3, #3
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000f94:	2308      	movs	r3, #8
 8000f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4809      	ldr	r0, [pc, #36]	@ (8000fc4 <HAL_UART_MspInit+0x100>)
 8000fa0:	f000 fafa 	bl	8001598 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	2047      	movs	r0, #71	@ 0x47
 8000faa:	f000 fa2c 	bl	8001406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000fae:	2047      	movs	r0, #71	@ 0x47
 8000fb0:	f000 fa45 	bl	800143e <HAL_NVIC_EnableIRQ>
}
 8000fb4:	bf00      	nop
 8000fb6:	3730      	adds	r7, #48	@ 0x30
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40004400 	.word	0x40004400
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40020000 	.word	0x40020000
 8000fc8:	40011400 	.word	0x40011400

08000fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <NMI_Handler+0x4>

08000fd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <HardFault_Handler+0x4>

08000fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <MemManage_Handler+0x4>

08000fe4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <BusFault_Handler+0x4>

08000fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <UsageFault_Handler+0x4>

08000ff4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001022:	f000 f8d1 	bl	80011c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001030:	4802      	ldr	r0, [pc, #8]	@ (800103c <USART6_IRQHandler+0x10>)
 8001032:	f002 f871 	bl	8003118 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	2000010c 	.word	0x2000010c

08001040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001048:	4a14      	ldr	r2, [pc, #80]	@ (800109c <_sbrk+0x5c>)
 800104a:	4b15      	ldr	r3, [pc, #84]	@ (80010a0 <_sbrk+0x60>)
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001054:	4b13      	ldr	r3, [pc, #76]	@ (80010a4 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800105c:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <_sbrk+0x64>)
 800105e:	4a12      	ldr	r2, [pc, #72]	@ (80010a8 <_sbrk+0x68>)
 8001060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001062:	4b10      	ldr	r3, [pc, #64]	@ (80010a4 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	429a      	cmp	r2, r3
 800106e:	d207      	bcs.n	8001080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001070:	f003 f88c 	bl	800418c <__errno>
 8001074:	4603      	mov	r3, r0
 8001076:	220c      	movs	r2, #12
 8001078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800107e:	e009      	b.n	8001094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001080:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001086:	4b07      	ldr	r3, [pc, #28]	@ (80010a4 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	4a05      	ldr	r2, [pc, #20]	@ (80010a4 <_sbrk+0x64>)
 8001090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001092:	68fb      	ldr	r3, [r7, #12]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20018000 	.word	0x20018000
 80010a0:	00000400 	.word	0x00000400
 80010a4:	20000164 	.word	0x20000164
 80010a8:	200002b8 	.word	0x200002b8

080010ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b0:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <SystemInit+0x20>)
 80010b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010b6:	4a05      	ldr	r2, [pc, #20]	@ (80010cc <SystemInit+0x20>)
 80010b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001108 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010d4:	f7ff ffea 	bl	80010ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d8:	480c      	ldr	r0, [pc, #48]	@ (800110c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010da:	490d      	ldr	r1, [pc, #52]	@ (8001110 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001114 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e0:	e002      	b.n	80010e8 <LoopCopyDataInit>

080010e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e6:	3304      	adds	r3, #4

080010e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ec:	d3f9      	bcc.n	80010e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001118 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010f0:	4c0a      	ldr	r4, [pc, #40]	@ (800111c <LoopFillZerobss+0x22>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f4:	e001      	b.n	80010fa <LoopFillZerobss>

080010f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f8:	3204      	adds	r2, #4

080010fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010fc:	d3fb      	bcc.n	80010f6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80010fe:	f003 f84b 	bl	8004198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001102:	f7ff fa3d 	bl	8000580 <main>
  bx  lr    
 8001106:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001108:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800110c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001110:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001114:	08004dd8 	.word	0x08004dd8
  ldr r2, =_sbss
 8001118:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800111c:	200002b4 	.word	0x200002b4

08001120 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001120:	e7fe      	b.n	8001120 <ADC_IRQHandler>
	...

08001124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001128:	4b0e      	ldr	r3, [pc, #56]	@ (8001164 <HAL_Init+0x40>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0d      	ldr	r2, [pc, #52]	@ (8001164 <HAL_Init+0x40>)
 800112e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001132:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001134:	4b0b      	ldr	r3, [pc, #44]	@ (8001164 <HAL_Init+0x40>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0a      	ldr	r2, [pc, #40]	@ (8001164 <HAL_Init+0x40>)
 800113a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800113e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001140:	4b08      	ldr	r3, [pc, #32]	@ (8001164 <HAL_Init+0x40>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a07      	ldr	r2, [pc, #28]	@ (8001164 <HAL_Init+0x40>)
 8001146:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800114a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800114c:	2003      	movs	r0, #3
 800114e:	f000 f94f 	bl	80013f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001152:	2000      	movs	r0, #0
 8001154:	f000 f808 	bl	8001168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001158:	f7ff fe34 	bl	8000dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023c00 	.word	0x40023c00

08001168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001170:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <HAL_InitTick+0x54>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <HAL_InitTick+0x58>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800117e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001182:	fbb2 f3f3 	udiv	r3, r2, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f967 	bl	800145a <HAL_SYSTICK_Config>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e00e      	b.n	80011b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b0f      	cmp	r3, #15
 800119a:	d80a      	bhi.n	80011b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800119c:	2200      	movs	r2, #0
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011a4:	f000 f92f 	bl	8001406 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a8:	4a06      	ldr	r2, [pc, #24]	@ (80011c4 <HAL_InitTick+0x5c>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	e000      	b.n	80011b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000000 	.word	0x20000000
 80011c0:	20000008 	.word	0x20000008
 80011c4:	20000004 	.word	0x20000004

080011c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011cc:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <HAL_IncTick+0x20>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <HAL_IncTick+0x24>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a04      	ldr	r2, [pc, #16]	@ (80011ec <HAL_IncTick+0x24>)
 80011da:	6013      	str	r3, [r2, #0]
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000008 	.word	0x20000008
 80011ec:	20000168 	.word	0x20000168

080011f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return uwTick;
 80011f4:	4b03      	ldr	r3, [pc, #12]	@ (8001204 <HAL_GetTick+0x14>)
 80011f6:	681b      	ldr	r3, [r3, #0]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000168 	.word	0x20000168

08001208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001210:	f7ff ffee 	bl	80011f0 <HAL_GetTick>
 8001214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001220:	d005      	beq.n	800122e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001222:	4b0a      	ldr	r3, [pc, #40]	@ (800124c <HAL_Delay+0x44>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4413      	add	r3, r2
 800122c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800122e:	bf00      	nop
 8001230:	f7ff ffde 	bl	80011f0 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	429a      	cmp	r2, r3
 800123e:	d8f7      	bhi.n	8001230 <HAL_Delay+0x28>
  {
  }
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000008 	.word	0x20000008

08001250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001260:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800126c:	4013      	ands	r3, r2
 800126e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001278:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800127c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001282:	4a04      	ldr	r2, [pc, #16]	@ (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	60d3      	str	r3, [r2, #12]
}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800129c:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <__NVIC_GetPriorityGrouping+0x18>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	f003 0307 	and.w	r3, r3, #7
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	db0b      	blt.n	80012de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	f003 021f 	and.w	r2, r3, #31
 80012cc:	4907      	ldr	r1, [pc, #28]	@ (80012ec <__NVIC_EnableIRQ+0x38>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	095b      	lsrs	r3, r3, #5
 80012d4:	2001      	movs	r0, #1
 80012d6:	fa00 f202 	lsl.w	r2, r0, r2
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000e100 	.word	0xe000e100

080012f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	db0a      	blt.n	800131a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	490c      	ldr	r1, [pc, #48]	@ (800133c <__NVIC_SetPriority+0x4c>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	0112      	lsls	r2, r2, #4
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	440b      	add	r3, r1
 8001314:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001318:	e00a      	b.n	8001330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4908      	ldr	r1, [pc, #32]	@ (8001340 <__NVIC_SetPriority+0x50>)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	3b04      	subs	r3, #4
 8001328:	0112      	lsls	r2, r2, #4
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	440b      	add	r3, r1
 800132e:	761a      	strb	r2, [r3, #24]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000e100 	.word	0xe000e100
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	@ 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f1c3 0307 	rsb	r3, r3, #7
 800135e:	2b04      	cmp	r3, #4
 8001360:	bf28      	it	cs
 8001362:	2304      	movcs	r3, #4
 8001364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3304      	adds	r3, #4
 800136a:	2b06      	cmp	r3, #6
 800136c:	d902      	bls.n	8001374 <NVIC_EncodePriority+0x30>
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3b03      	subs	r3, #3
 8001372:	e000      	b.n	8001376 <NVIC_EncodePriority+0x32>
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	401a      	ands	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800138c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	43d9      	mvns	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	4313      	orrs	r3, r2
         );
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3724      	adds	r7, #36	@ 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013bc:	d301      	bcc.n	80013c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013be:	2301      	movs	r3, #1
 80013c0:	e00f      	b.n	80013e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c2:	4a0a      	ldr	r2, [pc, #40]	@ (80013ec <SysTick_Config+0x40>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ca:	210f      	movs	r1, #15
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013d0:	f7ff ff8e 	bl	80012f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d4:	4b05      	ldr	r3, [pc, #20]	@ (80013ec <SysTick_Config+0x40>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013da:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <SysTick_Config+0x40>)
 80013dc:	2207      	movs	r2, #7
 80013de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	e000e010 	.word	0xe000e010

080013f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff29 	bl	8001250 <__NVIC_SetPriorityGrouping>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001406:	b580      	push	{r7, lr}
 8001408:	b086      	sub	sp, #24
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
 8001412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001418:	f7ff ff3e 	bl	8001298 <__NVIC_GetPriorityGrouping>
 800141c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	6978      	ldr	r0, [r7, #20]
 8001424:	f7ff ff8e 	bl	8001344 <NVIC_EncodePriority>
 8001428:	4602      	mov	r2, r0
 800142a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142e:	4611      	mov	r1, r2
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff5d 	bl	80012f0 <__NVIC_SetPriority>
}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff31 	bl	80012b4 <__NVIC_EnableIRQ>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ffa2 	bl	80013ac <SysTick_Config>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b084      	sub	sp, #16
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800147e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001480:	f7ff feb6 	bl	80011f0 <HAL_GetTick>
 8001484:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d008      	beq.n	80014a4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2280      	movs	r2, #128	@ 0x80
 8001496:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e052      	b.n	800154a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 0216 	bic.w	r2, r2, #22
 80014b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	695a      	ldr	r2, [r3, #20]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014c2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d103      	bne.n	80014d4 <HAL_DMA_Abort+0x62>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d007      	beq.n	80014e4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 0208 	bic.w	r2, r2, #8
 80014e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0201 	bic.w	r2, r2, #1
 80014f2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014f4:	e013      	b.n	800151e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014f6:	f7ff fe7b 	bl	80011f0 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b05      	cmp	r3, #5
 8001502:	d90c      	bls.n	800151e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2220      	movs	r2, #32
 8001508:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2203      	movs	r2, #3
 800150e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e015      	b.n	800154a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1e4      	bne.n	80014f6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001530:	223f      	movs	r2, #63	@ 0x3f
 8001532:	409a      	lsls	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2201      	movs	r2, #1
 800153c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d004      	beq.n	8001570 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2280      	movs	r2, #128	@ 0x80
 800156a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e00c      	b.n	800158a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2205      	movs	r2, #5
 8001574:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0201 	bic.w	r2, r2, #1
 8001586:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	@ 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
 80015b2:	e159      	b.n	8001868 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015b4:	2201      	movs	r2, #1
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	f040 8148 	bne.w	8001862 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d005      	beq.n	80015ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d130      	bne.n	800164c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	2203      	movs	r2, #3
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4013      	ands	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001620:	2201      	movs	r2, #1
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	091b      	lsrs	r3, r3, #4
 8001636:	f003 0201 	and.w	r2, r3, #1
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 0303 	and.w	r3, r3, #3
 8001654:	2b03      	cmp	r3, #3
 8001656:	d017      	beq.n	8001688 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	2203      	movs	r2, #3
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d123      	bne.n	80016dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	08da      	lsrs	r2, r3, #3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3208      	adds	r2, #8
 800169c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	220f      	movs	r2, #15
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	691a      	ldr	r2, [r3, #16]
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	08da      	lsrs	r2, r3, #3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3208      	adds	r2, #8
 80016d6:	69b9      	ldr	r1, [r7, #24]
 80016d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	2203      	movs	r2, #3
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 0203 	and.w	r2, r3, #3
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 80a2 	beq.w	8001862 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	4b57      	ldr	r3, [pc, #348]	@ (8001880 <HAL_GPIO_Init+0x2e8>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001726:	4a56      	ldr	r2, [pc, #344]	@ (8001880 <HAL_GPIO_Init+0x2e8>)
 8001728:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800172c:	6453      	str	r3, [r2, #68]	@ 0x44
 800172e:	4b54      	ldr	r3, [pc, #336]	@ (8001880 <HAL_GPIO_Init+0x2e8>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001732:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800173a:	4a52      	ldr	r2, [pc, #328]	@ (8001884 <HAL_GPIO_Init+0x2ec>)
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	089b      	lsrs	r3, r3, #2
 8001740:	3302      	adds	r3, #2
 8001742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001746:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	220f      	movs	r2, #15
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a49      	ldr	r2, [pc, #292]	@ (8001888 <HAL_GPIO_Init+0x2f0>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d019      	beq.n	800179a <HAL_GPIO_Init+0x202>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a48      	ldr	r2, [pc, #288]	@ (800188c <HAL_GPIO_Init+0x2f4>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d013      	beq.n	8001796 <HAL_GPIO_Init+0x1fe>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a47      	ldr	r2, [pc, #284]	@ (8001890 <HAL_GPIO_Init+0x2f8>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d00d      	beq.n	8001792 <HAL_GPIO_Init+0x1fa>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a46      	ldr	r2, [pc, #280]	@ (8001894 <HAL_GPIO_Init+0x2fc>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d007      	beq.n	800178e <HAL_GPIO_Init+0x1f6>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a45      	ldr	r2, [pc, #276]	@ (8001898 <HAL_GPIO_Init+0x300>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d101      	bne.n	800178a <HAL_GPIO_Init+0x1f2>
 8001786:	2304      	movs	r3, #4
 8001788:	e008      	b.n	800179c <HAL_GPIO_Init+0x204>
 800178a:	2307      	movs	r3, #7
 800178c:	e006      	b.n	800179c <HAL_GPIO_Init+0x204>
 800178e:	2303      	movs	r3, #3
 8001790:	e004      	b.n	800179c <HAL_GPIO_Init+0x204>
 8001792:	2302      	movs	r3, #2
 8001794:	e002      	b.n	800179c <HAL_GPIO_Init+0x204>
 8001796:	2301      	movs	r3, #1
 8001798:	e000      	b.n	800179c <HAL_GPIO_Init+0x204>
 800179a:	2300      	movs	r3, #0
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	f002 0203 	and.w	r2, r2, #3
 80017a2:	0092      	lsls	r2, r2, #2
 80017a4:	4093      	lsls	r3, r2
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017ac:	4935      	ldr	r1, [pc, #212]	@ (8001884 <HAL_GPIO_Init+0x2ec>)
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	089b      	lsrs	r3, r3, #2
 80017b2:	3302      	adds	r3, #2
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ba:	4b38      	ldr	r3, [pc, #224]	@ (800189c <HAL_GPIO_Init+0x304>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4013      	ands	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017de:	4a2f      	ldr	r2, [pc, #188]	@ (800189c <HAL_GPIO_Init+0x304>)
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017e4:	4b2d      	ldr	r3, [pc, #180]	@ (800189c <HAL_GPIO_Init+0x304>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001808:	4a24      	ldr	r2, [pc, #144]	@ (800189c <HAL_GPIO_Init+0x304>)
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800180e:	4b23      	ldr	r3, [pc, #140]	@ (800189c <HAL_GPIO_Init+0x304>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	43db      	mvns	r3, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4013      	ands	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001832:	4a1a      	ldr	r2, [pc, #104]	@ (800189c <HAL_GPIO_Init+0x304>)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001838:	4b18      	ldr	r3, [pc, #96]	@ (800189c <HAL_GPIO_Init+0x304>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800185c:	4a0f      	ldr	r2, [pc, #60]	@ (800189c <HAL_GPIO_Init+0x304>)
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3301      	adds	r3, #1
 8001866:	61fb      	str	r3, [r7, #28]
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	2b0f      	cmp	r3, #15
 800186c:	f67f aea2 	bls.w	80015b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	3724      	adds	r7, #36	@ 0x24
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40023800 	.word	0x40023800
 8001884:	40013800 	.word	0x40013800
 8001888:	40020000 	.word	0x40020000
 800188c:	40020400 	.word	0x40020400
 8001890:	40020800 	.word	0x40020800
 8001894:	40020c00 	.word	0x40020c00
 8001898:	40021000 	.word	0x40021000
 800189c:	40013c00 	.word	0x40013c00

080018a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691a      	ldr	r2, [r3, #16]
 80018b0:	887b      	ldrh	r3, [r7, #2]
 80018b2:	4013      	ands	r3, r2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d002      	beq.n	80018be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018b8:	2301      	movs	r3, #1
 80018ba:	73fb      	strb	r3, [r7, #15]
 80018bc:	e001      	b.n	80018c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018be:	2300      	movs	r3, #0
 80018c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e267      	b.n	8001db2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d075      	beq.n	80019da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80018ee:	4b88      	ldr	r3, [pc, #544]	@ (8001b10 <HAL_RCC_OscConfig+0x240>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	d00c      	beq.n	8001914 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018fa:	4b85      	ldr	r3, [pc, #532]	@ (8001b10 <HAL_RCC_OscConfig+0x240>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001902:	2b08      	cmp	r3, #8
 8001904:	d112      	bne.n	800192c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001906:	4b82      	ldr	r3, [pc, #520]	@ (8001b10 <HAL_RCC_OscConfig+0x240>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800190e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001912:	d10b      	bne.n	800192c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001914:	4b7e      	ldr	r3, [pc, #504]	@ (8001b10 <HAL_RCC_OscConfig+0x240>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d05b      	beq.n	80019d8 <HAL_RCC_OscConfig+0x108>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d157      	bne.n	80019d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e242      	b.n	8001db2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001934:	d106      	bne.n	8001944 <HAL_RCC_OscConfig+0x74>
 8001936:	4b76      	ldr	r3, [pc, #472]	@ (8001b10 <HAL_RCC_OscConfig+0x240>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a75      	ldr	r2, [pc, #468]	@ (8001b10 <HAL_RCC_OscConfig+0x240>)
 800193c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	e01d      	b.n	8001980 <HAL_RCC_OscConfig+0xb0>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800194c:	d10c      	bne.n	8001968 <HAL_RCC_OscConfig+0x98>
 800194e:	4b70      	ldr	r3, [pc, #448]	@ (8001b10 <HAL_RCC_OscConfig+0x240>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a6f      	ldr	r2, [pc, #444]	@ (8001b10 <HAL_RCC_OscConfig+0x240>)
 8001954:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	4b6d      	ldr	r3, [pc, #436]	@ (8001b10 <HAL_RCC_OscConfig+0x240>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a6c      	ldr	r2, [pc, #432]	@ (8001b10 <HAL_RCC_OscConfig+0x240>)
 8001960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	e00b      	b.n	8001980 <HAL_RCC_OscConfig+0xb0>
 8001968:	4b69      	ldr	r3, [pc, #420]	@ (8001b10 <HAL_RCC_OscConfig+0x240>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a68      	ldr	r2, [pc, #416]	@ (8001b10 <HAL_RCC_OscConfig+0x240>)
 800196e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	4b66      	ldr	r3, [pc, #408]	@ (8001b10 <HAL_RCC_OscConfig+0x240>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a65      	ldr	r2, [pc, #404]	@ (8001b10 <HAL_RCC_OscConfig+0x240>)
 800197a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800197e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d013      	beq.n	80019b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001988:	f7ff fc32 	bl	80011f0 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001990:	f7ff fc2e 	bl	80011f0 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b64      	cmp	r3, #100	@ 0x64
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e207      	b.n	8001db2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a2:	4b5b      	ldr	r3, [pc, #364]	@ (8001b10 <HAL_RCC_OscConfig+0x240>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCC_OscConfig+0xc0>
 80019ae:	e014      	b.n	80019da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b0:	f7ff fc1e 	bl	80011f0 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b8:	f7ff fc1a 	bl	80011f0 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b64      	cmp	r3, #100	@ 0x64
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e1f3      	b.n	8001db2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ca:	4b51      	ldr	r3, [pc, #324]	@ (8001b10 <HAL_RCC_OscConfig+0x240>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0xe8>
 80019d6:	e000      	b.n	80019da <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d063      	beq.n	8001aae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80019e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001b10 <HAL_RCC_OscConfig+0x240>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 030c 	and.w	r3, r3, #12
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00b      	beq.n	8001a0a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019f2:	4b47      	ldr	r3, [pc, #284]	@ (8001b10 <HAL_RCC_OscConfig+0x240>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d11c      	bne.n	8001a38 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019fe:	4b44      	ldr	r3, [pc, #272]	@ (8001b10 <HAL_RCC_OscConfig+0x240>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d116      	bne.n	8001a38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a0a:	4b41      	ldr	r3, [pc, #260]	@ (8001b10 <HAL_RCC_OscConfig+0x240>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d005      	beq.n	8001a22 <HAL_RCC_OscConfig+0x152>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d001      	beq.n	8001a22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e1c7      	b.n	8001db2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a22:	4b3b      	ldr	r3, [pc, #236]	@ (8001b10 <HAL_RCC_OscConfig+0x240>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	4937      	ldr	r1, [pc, #220]	@ (8001b10 <HAL_RCC_OscConfig+0x240>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a36:	e03a      	b.n	8001aae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d020      	beq.n	8001a82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a40:	4b34      	ldr	r3, [pc, #208]	@ (8001b14 <HAL_RCC_OscConfig+0x244>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a46:	f7ff fbd3 	bl	80011f0 <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a4e:	f7ff fbcf 	bl	80011f0 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e1a8      	b.n	8001db2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a60:	4b2b      	ldr	r3, [pc, #172]	@ (8001b10 <HAL_RCC_OscConfig+0x240>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d0f0      	beq.n	8001a4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6c:	4b28      	ldr	r3, [pc, #160]	@ (8001b10 <HAL_RCC_OscConfig+0x240>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	4925      	ldr	r1, [pc, #148]	@ (8001b10 <HAL_RCC_OscConfig+0x240>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	600b      	str	r3, [r1, #0]
 8001a80:	e015      	b.n	8001aae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a82:	4b24      	ldr	r3, [pc, #144]	@ (8001b14 <HAL_RCC_OscConfig+0x244>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a88:	f7ff fbb2 	bl	80011f0 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a90:	f7ff fbae 	bl	80011f0 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e187      	b.n	8001db2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b10 <HAL_RCC_OscConfig+0x240>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f0      	bne.n	8001a90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d036      	beq.n	8001b28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d016      	beq.n	8001af0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ac2:	4b15      	ldr	r3, [pc, #84]	@ (8001b18 <HAL_RCC_OscConfig+0x248>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac8:	f7ff fb92 	bl	80011f0 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad0:	f7ff fb8e 	bl	80011f0 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e167      	b.n	8001db2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <HAL_RCC_OscConfig+0x240>)
 8001ae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0f0      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x200>
 8001aee:	e01b      	b.n	8001b28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001af0:	4b09      	ldr	r3, [pc, #36]	@ (8001b18 <HAL_RCC_OscConfig+0x248>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af6:	f7ff fb7b 	bl	80011f0 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001afc:	e00e      	b.n	8001b1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001afe:	f7ff fb77 	bl	80011f0 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d907      	bls.n	8001b1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e150      	b.n	8001db2 <HAL_RCC_OscConfig+0x4e2>
 8001b10:	40023800 	.word	0x40023800
 8001b14:	42470000 	.word	0x42470000
 8001b18:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b1c:	4b88      	ldr	r3, [pc, #544]	@ (8001d40 <HAL_RCC_OscConfig+0x470>)
 8001b1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1ea      	bne.n	8001afe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 8097 	beq.w	8001c64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b36:	2300      	movs	r3, #0
 8001b38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b3a:	4b81      	ldr	r3, [pc, #516]	@ (8001d40 <HAL_RCC_OscConfig+0x470>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10f      	bne.n	8001b66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	4b7d      	ldr	r3, [pc, #500]	@ (8001d40 <HAL_RCC_OscConfig+0x470>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4e:	4a7c      	ldr	r2, [pc, #496]	@ (8001d40 <HAL_RCC_OscConfig+0x470>)
 8001b50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b56:	4b7a      	ldr	r3, [pc, #488]	@ (8001d40 <HAL_RCC_OscConfig+0x470>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b62:	2301      	movs	r3, #1
 8001b64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b66:	4b77      	ldr	r3, [pc, #476]	@ (8001d44 <HAL_RCC_OscConfig+0x474>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d118      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b72:	4b74      	ldr	r3, [pc, #464]	@ (8001d44 <HAL_RCC_OscConfig+0x474>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a73      	ldr	r2, [pc, #460]	@ (8001d44 <HAL_RCC_OscConfig+0x474>)
 8001b78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b7e:	f7ff fb37 	bl	80011f0 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b86:	f7ff fb33 	bl	80011f0 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e10c      	b.n	8001db2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b98:	4b6a      	ldr	r3, [pc, #424]	@ (8001d44 <HAL_RCC_OscConfig+0x474>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0f0      	beq.n	8001b86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d106      	bne.n	8001bba <HAL_RCC_OscConfig+0x2ea>
 8001bac:	4b64      	ldr	r3, [pc, #400]	@ (8001d40 <HAL_RCC_OscConfig+0x470>)
 8001bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bb0:	4a63      	ldr	r2, [pc, #396]	@ (8001d40 <HAL_RCC_OscConfig+0x470>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bb8:	e01c      	b.n	8001bf4 <HAL_RCC_OscConfig+0x324>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b05      	cmp	r3, #5
 8001bc0:	d10c      	bne.n	8001bdc <HAL_RCC_OscConfig+0x30c>
 8001bc2:	4b5f      	ldr	r3, [pc, #380]	@ (8001d40 <HAL_RCC_OscConfig+0x470>)
 8001bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bc6:	4a5e      	ldr	r2, [pc, #376]	@ (8001d40 <HAL_RCC_OscConfig+0x470>)
 8001bc8:	f043 0304 	orr.w	r3, r3, #4
 8001bcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bce:	4b5c      	ldr	r3, [pc, #368]	@ (8001d40 <HAL_RCC_OscConfig+0x470>)
 8001bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bd2:	4a5b      	ldr	r2, [pc, #364]	@ (8001d40 <HAL_RCC_OscConfig+0x470>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bda:	e00b      	b.n	8001bf4 <HAL_RCC_OscConfig+0x324>
 8001bdc:	4b58      	ldr	r3, [pc, #352]	@ (8001d40 <HAL_RCC_OscConfig+0x470>)
 8001bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001be0:	4a57      	ldr	r2, [pc, #348]	@ (8001d40 <HAL_RCC_OscConfig+0x470>)
 8001be2:	f023 0301 	bic.w	r3, r3, #1
 8001be6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001be8:	4b55      	ldr	r3, [pc, #340]	@ (8001d40 <HAL_RCC_OscConfig+0x470>)
 8001bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bec:	4a54      	ldr	r2, [pc, #336]	@ (8001d40 <HAL_RCC_OscConfig+0x470>)
 8001bee:	f023 0304 	bic.w	r3, r3, #4
 8001bf2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d015      	beq.n	8001c28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfc:	f7ff faf8 	bl	80011f0 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c02:	e00a      	b.n	8001c1a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c04:	f7ff faf4 	bl	80011f0 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e0cb      	b.n	8001db2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c1a:	4b49      	ldr	r3, [pc, #292]	@ (8001d40 <HAL_RCC_OscConfig+0x470>)
 8001c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0ee      	beq.n	8001c04 <HAL_RCC_OscConfig+0x334>
 8001c26:	e014      	b.n	8001c52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c28:	f7ff fae2 	bl	80011f0 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c2e:	e00a      	b.n	8001c46 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c30:	f7ff fade 	bl	80011f0 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e0b5      	b.n	8001db2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c46:	4b3e      	ldr	r3, [pc, #248]	@ (8001d40 <HAL_RCC_OscConfig+0x470>)
 8001c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1ee      	bne.n	8001c30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c52:	7dfb      	ldrb	r3, [r7, #23]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d105      	bne.n	8001c64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c58:	4b39      	ldr	r3, [pc, #228]	@ (8001d40 <HAL_RCC_OscConfig+0x470>)
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5c:	4a38      	ldr	r2, [pc, #224]	@ (8001d40 <HAL_RCC_OscConfig+0x470>)
 8001c5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 80a1 	beq.w	8001db0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c6e:	4b34      	ldr	r3, [pc, #208]	@ (8001d40 <HAL_RCC_OscConfig+0x470>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 030c 	and.w	r3, r3, #12
 8001c76:	2b08      	cmp	r3, #8
 8001c78:	d05c      	beq.n	8001d34 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d141      	bne.n	8001d06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c82:	4b31      	ldr	r3, [pc, #196]	@ (8001d48 <HAL_RCC_OscConfig+0x478>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c88:	f7ff fab2 	bl	80011f0 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c90:	f7ff faae 	bl	80011f0 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e087      	b.n	8001db2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca2:	4b27      	ldr	r3, [pc, #156]	@ (8001d40 <HAL_RCC_OscConfig+0x470>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f0      	bne.n	8001c90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69da      	ldr	r2, [r3, #28]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbc:	019b      	lsls	r3, r3, #6
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc4:	085b      	lsrs	r3, r3, #1
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	041b      	lsls	r3, r3, #16
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd0:	061b      	lsls	r3, r3, #24
 8001cd2:	491b      	ldr	r1, [pc, #108]	@ (8001d40 <HAL_RCC_OscConfig+0x470>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d48 <HAL_RCC_OscConfig+0x478>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cde:	f7ff fa87 	bl	80011f0 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce6:	f7ff fa83 	bl	80011f0 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e05c      	b.n	8001db2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf8:	4b11      	ldr	r3, [pc, #68]	@ (8001d40 <HAL_RCC_OscConfig+0x470>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x416>
 8001d04:	e054      	b.n	8001db0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d06:	4b10      	ldr	r3, [pc, #64]	@ (8001d48 <HAL_RCC_OscConfig+0x478>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff fa70 	bl	80011f0 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d14:	f7ff fa6c 	bl	80011f0 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e045      	b.n	8001db2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d26:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <HAL_RCC_OscConfig+0x470>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x444>
 8001d32:	e03d      	b.n	8001db0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d107      	bne.n	8001d4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e038      	b.n	8001db2 <HAL_RCC_OscConfig+0x4e2>
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40007000 	.word	0x40007000
 8001d48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dbc <HAL_RCC_OscConfig+0x4ec>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d028      	beq.n	8001dac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d121      	bne.n	8001dac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d11a      	bne.n	8001dac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d111      	bne.n	8001dac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d92:	085b      	lsrs	r3, r3, #1
 8001d94:	3b01      	subs	r3, #1
 8001d96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d107      	bne.n	8001dac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d001      	beq.n	8001db0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e000      	b.n	8001db2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800

08001dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0cc      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dd4:	4b68      	ldr	r3, [pc, #416]	@ (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d90c      	bls.n	8001dfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de2:	4b65      	ldr	r3, [pc, #404]	@ (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dea:	4b63      	ldr	r3, [pc, #396]	@ (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d001      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0b8      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d020      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e14:	4b59      	ldr	r3, [pc, #356]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4a58      	ldr	r2, [pc, #352]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e2c:	4b53      	ldr	r3, [pc, #332]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	4a52      	ldr	r2, [pc, #328]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e38:	4b50      	ldr	r3, [pc, #320]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	494d      	ldr	r1, [pc, #308]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d044      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d107      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	4b47      	ldr	r3, [pc, #284]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d119      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e07f      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d003      	beq.n	8001e7e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d107      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e7e:	4b3f      	ldr	r3, [pc, #252]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d109      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e06f      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e067      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e9e:	4b37      	ldr	r3, [pc, #220]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f023 0203 	bic.w	r2, r3, #3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	4934      	ldr	r1, [pc, #208]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001eb0:	f7ff f99e 	bl	80011f0 <HAL_GetTick>
 8001eb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb6:	e00a      	b.n	8001ece <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb8:	f7ff f99a 	bl	80011f0 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e04f      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ece:	4b2b      	ldr	r3, [pc, #172]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 020c 	and.w	r2, r3, #12
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d1eb      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee0:	4b25      	ldr	r3, [pc, #148]	@ (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d20c      	bcs.n	8001f08 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eee:	4b22      	ldr	r3, [pc, #136]	@ (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef6:	4b20      	ldr	r3, [pc, #128]	@ (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e032      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d008      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f14:	4b19      	ldr	r3, [pc, #100]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	4916      	ldr	r1, [pc, #88]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d009      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f32:	4b12      	ldr	r3, [pc, #72]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	490e      	ldr	r1, [pc, #56]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f46:	f000 f821 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	490a      	ldr	r1, [pc, #40]	@ (8001f80 <HAL_RCC_ClockConfig+0x1c0>)
 8001f58:	5ccb      	ldrb	r3, [r1, r3]
 8001f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5e:	4a09      	ldr	r2, [pc, #36]	@ (8001f84 <HAL_RCC_ClockConfig+0x1c4>)
 8001f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001f62:	4b09      	ldr	r3, [pc, #36]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff f8fe 	bl	8001168 <HAL_InitTick>

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023c00 	.word	0x40023c00
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	08004c7c 	.word	0x08004c7c
 8001f84:	20000000 	.word	0x20000000
 8001f88:	20000004 	.word	0x20000004

08001f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f90:	b094      	sub	sp, #80	@ 0x50
 8001f92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fa4:	4b79      	ldr	r3, [pc, #484]	@ (800218c <HAL_RCC_GetSysClockFreq+0x200>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 030c 	and.w	r3, r3, #12
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	d00d      	beq.n	8001fcc <HAL_RCC_GetSysClockFreq+0x40>
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	f200 80e1 	bhi.w	8002178 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d002      	beq.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x34>
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d003      	beq.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001fbe:	e0db      	b.n	8002178 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fc0:	4b73      	ldr	r3, [pc, #460]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fc2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fc4:	e0db      	b.n	800217e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fc6:	4b73      	ldr	r3, [pc, #460]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x208>)
 8001fc8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fca:	e0d8      	b.n	800217e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fcc:	4b6f      	ldr	r3, [pc, #444]	@ (800218c <HAL_RCC_GetSysClockFreq+0x200>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fd4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fd6:	4b6d      	ldr	r3, [pc, #436]	@ (800218c <HAL_RCC_GetSysClockFreq+0x200>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d063      	beq.n	80020aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fe2:	4b6a      	ldr	r3, [pc, #424]	@ (800218c <HAL_RCC_GetSysClockFreq+0x200>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	099b      	lsrs	r3, r3, #6
 8001fe8:	2200      	movs	r2, #0
 8001fea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ff4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ffa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ffe:	4622      	mov	r2, r4
 8002000:	462b      	mov	r3, r5
 8002002:	f04f 0000 	mov.w	r0, #0
 8002006:	f04f 0100 	mov.w	r1, #0
 800200a:	0159      	lsls	r1, r3, #5
 800200c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002010:	0150      	lsls	r0, r2, #5
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	4621      	mov	r1, r4
 8002018:	1a51      	subs	r1, r2, r1
 800201a:	6139      	str	r1, [r7, #16]
 800201c:	4629      	mov	r1, r5
 800201e:	eb63 0301 	sbc.w	r3, r3, r1
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	f04f 0300 	mov.w	r3, #0
 800202c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002030:	4659      	mov	r1, fp
 8002032:	018b      	lsls	r3, r1, #6
 8002034:	4651      	mov	r1, sl
 8002036:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800203a:	4651      	mov	r1, sl
 800203c:	018a      	lsls	r2, r1, #6
 800203e:	4651      	mov	r1, sl
 8002040:	ebb2 0801 	subs.w	r8, r2, r1
 8002044:	4659      	mov	r1, fp
 8002046:	eb63 0901 	sbc.w	r9, r3, r1
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	f04f 0300 	mov.w	r3, #0
 8002052:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002056:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800205a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800205e:	4690      	mov	r8, r2
 8002060:	4699      	mov	r9, r3
 8002062:	4623      	mov	r3, r4
 8002064:	eb18 0303 	adds.w	r3, r8, r3
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	462b      	mov	r3, r5
 800206c:	eb49 0303 	adc.w	r3, r9, r3
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800207e:	4629      	mov	r1, r5
 8002080:	024b      	lsls	r3, r1, #9
 8002082:	4621      	mov	r1, r4
 8002084:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002088:	4621      	mov	r1, r4
 800208a:	024a      	lsls	r2, r1, #9
 800208c:	4610      	mov	r0, r2
 800208e:	4619      	mov	r1, r3
 8002090:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002092:	2200      	movs	r2, #0
 8002094:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002096:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002098:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800209c:	f7fe f8f8 	bl	8000290 <__aeabi_uldivmod>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4613      	mov	r3, r2
 80020a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020a8:	e058      	b.n	800215c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020aa:	4b38      	ldr	r3, [pc, #224]	@ (800218c <HAL_RCC_GetSysClockFreq+0x200>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	099b      	lsrs	r3, r3, #6
 80020b0:	2200      	movs	r2, #0
 80020b2:	4618      	mov	r0, r3
 80020b4:	4611      	mov	r1, r2
 80020b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020ba:	623b      	str	r3, [r7, #32]
 80020bc:	2300      	movs	r3, #0
 80020be:	627b      	str	r3, [r7, #36]	@ 0x24
 80020c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80020c4:	4642      	mov	r2, r8
 80020c6:	464b      	mov	r3, r9
 80020c8:	f04f 0000 	mov.w	r0, #0
 80020cc:	f04f 0100 	mov.w	r1, #0
 80020d0:	0159      	lsls	r1, r3, #5
 80020d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020d6:	0150      	lsls	r0, r2, #5
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4641      	mov	r1, r8
 80020de:	ebb2 0a01 	subs.w	sl, r2, r1
 80020e2:	4649      	mov	r1, r9
 80020e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	f04f 0300 	mov.w	r3, #0
 80020f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020fc:	ebb2 040a 	subs.w	r4, r2, sl
 8002100:	eb63 050b 	sbc.w	r5, r3, fp
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	f04f 0300 	mov.w	r3, #0
 800210c:	00eb      	lsls	r3, r5, #3
 800210e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002112:	00e2      	lsls	r2, r4, #3
 8002114:	4614      	mov	r4, r2
 8002116:	461d      	mov	r5, r3
 8002118:	4643      	mov	r3, r8
 800211a:	18e3      	adds	r3, r4, r3
 800211c:	603b      	str	r3, [r7, #0]
 800211e:	464b      	mov	r3, r9
 8002120:	eb45 0303 	adc.w	r3, r5, r3
 8002124:	607b      	str	r3, [r7, #4]
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	f04f 0300 	mov.w	r3, #0
 800212e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002132:	4629      	mov	r1, r5
 8002134:	028b      	lsls	r3, r1, #10
 8002136:	4621      	mov	r1, r4
 8002138:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800213c:	4621      	mov	r1, r4
 800213e:	028a      	lsls	r2, r1, #10
 8002140:	4610      	mov	r0, r2
 8002142:	4619      	mov	r1, r3
 8002144:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002146:	2200      	movs	r2, #0
 8002148:	61bb      	str	r3, [r7, #24]
 800214a:	61fa      	str	r2, [r7, #28]
 800214c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002150:	f7fe f89e 	bl	8000290 <__aeabi_uldivmod>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4613      	mov	r3, r2
 800215a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800215c:	4b0b      	ldr	r3, [pc, #44]	@ (800218c <HAL_RCC_GetSysClockFreq+0x200>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	0c1b      	lsrs	r3, r3, #16
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	3301      	adds	r3, #1
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800216c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800216e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002170:	fbb2 f3f3 	udiv	r3, r2, r3
 8002174:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002176:	e002      	b.n	800217e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002178:	4b05      	ldr	r3, [pc, #20]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x204>)
 800217a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800217c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800217e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002180:	4618      	mov	r0, r3
 8002182:	3750      	adds	r7, #80	@ 0x50
 8002184:	46bd      	mov	sp, r7
 8002186:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800
 8002190:	00f42400 	.word	0x00f42400
 8002194:	007a1200 	.word	0x007a1200

08002198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800219c:	4b03      	ldr	r3, [pc, #12]	@ (80021ac <HAL_RCC_GetHCLKFreq+0x14>)
 800219e:	681b      	ldr	r3, [r3, #0]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	20000000 	.word	0x20000000

080021b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021b4:	f7ff fff0 	bl	8002198 <HAL_RCC_GetHCLKFreq>
 80021b8:	4602      	mov	r2, r0
 80021ba:	4b05      	ldr	r3, [pc, #20]	@ (80021d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	0a9b      	lsrs	r3, r3, #10
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	4903      	ldr	r1, [pc, #12]	@ (80021d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021c6:	5ccb      	ldrb	r3, [r1, r3]
 80021c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40023800 	.word	0x40023800
 80021d4:	08004c8c 	.word	0x08004c8c

080021d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021dc:	f7ff ffdc 	bl	8002198 <HAL_RCC_GetHCLKFreq>
 80021e0:	4602      	mov	r2, r0
 80021e2:	4b05      	ldr	r3, [pc, #20]	@ (80021f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	0b5b      	lsrs	r3, r3, #13
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	4903      	ldr	r1, [pc, #12]	@ (80021fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80021ee:	5ccb      	ldrb	r3, [r1, r3]
 80021f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40023800 	.word	0x40023800
 80021fc:	08004c8c 	.word	0x08004c8c

08002200 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e041      	b.n	8002296 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d106      	bne.n	800222c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7fe fdf4 	bl	8000e14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3304      	adds	r3, #4
 800223c:	4619      	mov	r1, r3
 800223e:	4610      	mov	r0, r2
 8002240:	f000 fb24 	bl	800288c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e041      	b.n	8002334 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d106      	bne.n	80022ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f839 	bl	800233c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2202      	movs	r2, #2
 80022ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3304      	adds	r3, #4
 80022da:	4619      	mov	r1, r3
 80022dc:	4610      	mov	r0, r2
 80022de:	f000 fad5 	bl	800288c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d109      	bne.n	8002374 <HAL_TIM_PWM_Start+0x24>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b01      	cmp	r3, #1
 800236a:	bf14      	ite	ne
 800236c:	2301      	movne	r3, #1
 800236e:	2300      	moveq	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	e022      	b.n	80023ba <HAL_TIM_PWM_Start+0x6a>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2b04      	cmp	r3, #4
 8002378:	d109      	bne.n	800238e <HAL_TIM_PWM_Start+0x3e>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b01      	cmp	r3, #1
 8002384:	bf14      	ite	ne
 8002386:	2301      	movne	r3, #1
 8002388:	2300      	moveq	r3, #0
 800238a:	b2db      	uxtb	r3, r3
 800238c:	e015      	b.n	80023ba <HAL_TIM_PWM_Start+0x6a>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2b08      	cmp	r3, #8
 8002392:	d109      	bne.n	80023a8 <HAL_TIM_PWM_Start+0x58>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b01      	cmp	r3, #1
 800239e:	bf14      	ite	ne
 80023a0:	2301      	movne	r3, #1
 80023a2:	2300      	moveq	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	e008      	b.n	80023ba <HAL_TIM_PWM_Start+0x6a>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	bf14      	ite	ne
 80023b4:	2301      	movne	r3, #1
 80023b6:	2300      	moveq	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e068      	b.n	8002494 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d104      	bne.n	80023d2 <HAL_TIM_PWM_Start+0x82>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023d0:	e013      	b.n	80023fa <HAL_TIM_PWM_Start+0xaa>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d104      	bne.n	80023e2 <HAL_TIM_PWM_Start+0x92>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2202      	movs	r2, #2
 80023dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023e0:	e00b      	b.n	80023fa <HAL_TIM_PWM_Start+0xaa>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d104      	bne.n	80023f2 <HAL_TIM_PWM_Start+0xa2>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2202      	movs	r2, #2
 80023ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023f0:	e003      	b.n	80023fa <HAL_TIM_PWM_Start+0xaa>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2202      	movs	r2, #2
 80023f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2201      	movs	r2, #1
 8002400:	6839      	ldr	r1, [r7, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f000 fcf4 	bl	8002df0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a23      	ldr	r2, [pc, #140]	@ (800249c <HAL_TIM_PWM_Start+0x14c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d107      	bne.n	8002422 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002420:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a1d      	ldr	r2, [pc, #116]	@ (800249c <HAL_TIM_PWM_Start+0x14c>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d018      	beq.n	800245e <HAL_TIM_PWM_Start+0x10e>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002434:	d013      	beq.n	800245e <HAL_TIM_PWM_Start+0x10e>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a19      	ldr	r2, [pc, #100]	@ (80024a0 <HAL_TIM_PWM_Start+0x150>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d00e      	beq.n	800245e <HAL_TIM_PWM_Start+0x10e>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a17      	ldr	r2, [pc, #92]	@ (80024a4 <HAL_TIM_PWM_Start+0x154>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d009      	beq.n	800245e <HAL_TIM_PWM_Start+0x10e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a16      	ldr	r2, [pc, #88]	@ (80024a8 <HAL_TIM_PWM_Start+0x158>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d004      	beq.n	800245e <HAL_TIM_PWM_Start+0x10e>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a14      	ldr	r2, [pc, #80]	@ (80024ac <HAL_TIM_PWM_Start+0x15c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d111      	bne.n	8002482 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2b06      	cmp	r3, #6
 800246e:	d010      	beq.n	8002492 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002480:	e007      	b.n	8002492 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0201 	orr.w	r2, r2, #1
 8002490:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40010000 	.word	0x40010000
 80024a0:	40000400 	.word	0x40000400
 80024a4:	40000800 	.word	0x40000800
 80024a8:	40000c00 	.word	0x40000c00
 80024ac:	40014000 	.word	0x40014000

080024b0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2200      	movs	r2, #0
 80024c0:	6839      	ldr	r1, [r7, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 fc94 	bl	8002df0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a29      	ldr	r2, [pc, #164]	@ (8002574 <HAL_TIM_PWM_Stop+0xc4>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d117      	bne.n	8002502 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6a1a      	ldr	r2, [r3, #32]
 80024d8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80024dc:	4013      	ands	r3, r2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10f      	bne.n	8002502 <HAL_TIM_PWM_Stop+0x52>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6a1a      	ldr	r2, [r3, #32]
 80024e8:	f240 4344 	movw	r3, #1092	@ 0x444
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d107      	bne.n	8002502 <HAL_TIM_PWM_Stop+0x52>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002500:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6a1a      	ldr	r2, [r3, #32]
 8002508:	f241 1311 	movw	r3, #4369	@ 0x1111
 800250c:	4013      	ands	r3, r2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10f      	bne.n	8002532 <HAL_TIM_PWM_Stop+0x82>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6a1a      	ldr	r2, [r3, #32]
 8002518:	f240 4344 	movw	r3, #1092	@ 0x444
 800251c:	4013      	ands	r3, r2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d107      	bne.n	8002532 <HAL_TIM_PWM_Stop+0x82>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0201 	bic.w	r2, r2, #1
 8002530:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d104      	bne.n	8002542 <HAL_TIM_PWM_Stop+0x92>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002540:	e013      	b.n	800256a <HAL_TIM_PWM_Stop+0xba>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	2b04      	cmp	r3, #4
 8002546:	d104      	bne.n	8002552 <HAL_TIM_PWM_Stop+0xa2>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002550:	e00b      	b.n	800256a <HAL_TIM_PWM_Stop+0xba>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b08      	cmp	r3, #8
 8002556:	d104      	bne.n	8002562 <HAL_TIM_PWM_Stop+0xb2>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002560:	e003      	b.n	800256a <HAL_TIM_PWM_Stop+0xba>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40010000 	.word	0x40010000

08002578 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002584:	2300      	movs	r3, #0
 8002586:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800258e:	2b01      	cmp	r3, #1
 8002590:	d101      	bne.n	8002596 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002592:	2302      	movs	r3, #2
 8002594:	e0ae      	b.n	80026f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b0c      	cmp	r3, #12
 80025a2:	f200 809f 	bhi.w	80026e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80025a6:	a201      	add	r2, pc, #4	@ (adr r2, 80025ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80025a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ac:	080025e1 	.word	0x080025e1
 80025b0:	080026e5 	.word	0x080026e5
 80025b4:	080026e5 	.word	0x080026e5
 80025b8:	080026e5 	.word	0x080026e5
 80025bc:	08002621 	.word	0x08002621
 80025c0:	080026e5 	.word	0x080026e5
 80025c4:	080026e5 	.word	0x080026e5
 80025c8:	080026e5 	.word	0x080026e5
 80025cc:	08002663 	.word	0x08002663
 80025d0:	080026e5 	.word	0x080026e5
 80025d4:	080026e5 	.word	0x080026e5
 80025d8:	080026e5 	.word	0x080026e5
 80025dc:	080026a3 	.word	0x080026a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68b9      	ldr	r1, [r7, #8]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 f9dc 	bl	80029a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699a      	ldr	r2, [r3, #24]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0208 	orr.w	r2, r2, #8
 80025fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699a      	ldr	r2, [r3, #24]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0204 	bic.w	r2, r2, #4
 800260a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6999      	ldr	r1, [r3, #24]
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	691a      	ldr	r2, [r3, #16]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	619a      	str	r2, [r3, #24]
      break;
 800261e:	e064      	b.n	80026ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68b9      	ldr	r1, [r7, #8]
 8002626:	4618      	mov	r0, r3
 8002628:	f000 fa22 	bl	8002a70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	699a      	ldr	r2, [r3, #24]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800263a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699a      	ldr	r2, [r3, #24]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800264a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6999      	ldr	r1, [r3, #24]
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	021a      	lsls	r2, r3, #8
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	619a      	str	r2, [r3, #24]
      break;
 8002660:	e043      	b.n	80026ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68b9      	ldr	r1, [r7, #8]
 8002668:	4618      	mov	r0, r3
 800266a:	f000 fa6d 	bl	8002b48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	69da      	ldr	r2, [r3, #28]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f042 0208 	orr.w	r2, r2, #8
 800267c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	69da      	ldr	r2, [r3, #28]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0204 	bic.w	r2, r2, #4
 800268c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	69d9      	ldr	r1, [r3, #28]
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	61da      	str	r2, [r3, #28]
      break;
 80026a0:	e023      	b.n	80026ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68b9      	ldr	r1, [r7, #8]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 fab7 	bl	8002c1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	69da      	ldr	r2, [r3, #28]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	69da      	ldr	r2, [r3, #28]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	69d9      	ldr	r1, [r3, #28]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	021a      	lsls	r2, r3, #8
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	61da      	str	r2, [r3, #28]
      break;
 80026e2:	e002      	b.n	80026ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	75fb      	strb	r3, [r7, #23]
      break;
 80026e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80026f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002710:	2b01      	cmp	r3, #1
 8002712:	d101      	bne.n	8002718 <HAL_TIM_ConfigClockSource+0x1c>
 8002714:	2302      	movs	r3, #2
 8002716:	e0b4      	b.n	8002882 <HAL_TIM_ConfigClockSource+0x186>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002736:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800273e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002750:	d03e      	beq.n	80027d0 <HAL_TIM_ConfigClockSource+0xd4>
 8002752:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002756:	f200 8087 	bhi.w	8002868 <HAL_TIM_ConfigClockSource+0x16c>
 800275a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800275e:	f000 8086 	beq.w	800286e <HAL_TIM_ConfigClockSource+0x172>
 8002762:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002766:	d87f      	bhi.n	8002868 <HAL_TIM_ConfigClockSource+0x16c>
 8002768:	2b70      	cmp	r3, #112	@ 0x70
 800276a:	d01a      	beq.n	80027a2 <HAL_TIM_ConfigClockSource+0xa6>
 800276c:	2b70      	cmp	r3, #112	@ 0x70
 800276e:	d87b      	bhi.n	8002868 <HAL_TIM_ConfigClockSource+0x16c>
 8002770:	2b60      	cmp	r3, #96	@ 0x60
 8002772:	d050      	beq.n	8002816 <HAL_TIM_ConfigClockSource+0x11a>
 8002774:	2b60      	cmp	r3, #96	@ 0x60
 8002776:	d877      	bhi.n	8002868 <HAL_TIM_ConfigClockSource+0x16c>
 8002778:	2b50      	cmp	r3, #80	@ 0x50
 800277a:	d03c      	beq.n	80027f6 <HAL_TIM_ConfigClockSource+0xfa>
 800277c:	2b50      	cmp	r3, #80	@ 0x50
 800277e:	d873      	bhi.n	8002868 <HAL_TIM_ConfigClockSource+0x16c>
 8002780:	2b40      	cmp	r3, #64	@ 0x40
 8002782:	d058      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0x13a>
 8002784:	2b40      	cmp	r3, #64	@ 0x40
 8002786:	d86f      	bhi.n	8002868 <HAL_TIM_ConfigClockSource+0x16c>
 8002788:	2b30      	cmp	r3, #48	@ 0x30
 800278a:	d064      	beq.n	8002856 <HAL_TIM_ConfigClockSource+0x15a>
 800278c:	2b30      	cmp	r3, #48	@ 0x30
 800278e:	d86b      	bhi.n	8002868 <HAL_TIM_ConfigClockSource+0x16c>
 8002790:	2b20      	cmp	r3, #32
 8002792:	d060      	beq.n	8002856 <HAL_TIM_ConfigClockSource+0x15a>
 8002794:	2b20      	cmp	r3, #32
 8002796:	d867      	bhi.n	8002868 <HAL_TIM_ConfigClockSource+0x16c>
 8002798:	2b00      	cmp	r3, #0
 800279a:	d05c      	beq.n	8002856 <HAL_TIM_ConfigClockSource+0x15a>
 800279c:	2b10      	cmp	r3, #16
 800279e:	d05a      	beq.n	8002856 <HAL_TIM_ConfigClockSource+0x15a>
 80027a0:	e062      	b.n	8002868 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027b2:	f000 fafd 	bl	8002db0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80027c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	609a      	str	r2, [r3, #8]
      break;
 80027ce:	e04f      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027e0:	f000 fae6 	bl	8002db0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027f2:	609a      	str	r2, [r3, #8]
      break;
 80027f4:	e03c      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002802:	461a      	mov	r2, r3
 8002804:	f000 fa5a 	bl	8002cbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2150      	movs	r1, #80	@ 0x50
 800280e:	4618      	mov	r0, r3
 8002810:	f000 fab3 	bl	8002d7a <TIM_ITRx_SetConfig>
      break;
 8002814:	e02c      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002822:	461a      	mov	r2, r3
 8002824:	f000 fa79 	bl	8002d1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2160      	movs	r1, #96	@ 0x60
 800282e:	4618      	mov	r0, r3
 8002830:	f000 faa3 	bl	8002d7a <TIM_ITRx_SetConfig>
      break;
 8002834:	e01c      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002842:	461a      	mov	r2, r3
 8002844:	f000 fa3a 	bl	8002cbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2140      	movs	r1, #64	@ 0x40
 800284e:	4618      	mov	r0, r3
 8002850:	f000 fa93 	bl	8002d7a <TIM_ITRx_SetConfig>
      break;
 8002854:	e00c      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4619      	mov	r1, r3
 8002860:	4610      	mov	r0, r2
 8002862:	f000 fa8a 	bl	8002d7a <TIM_ITRx_SetConfig>
      break;
 8002866:	e003      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	73fb      	strb	r3, [r7, #15]
      break;
 800286c:	e000      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800286e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002880:	7bfb      	ldrb	r3, [r7, #15]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a3a      	ldr	r2, [pc, #232]	@ (8002988 <TIM_Base_SetConfig+0xfc>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d00f      	beq.n	80028c4 <TIM_Base_SetConfig+0x38>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028aa:	d00b      	beq.n	80028c4 <TIM_Base_SetConfig+0x38>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a37      	ldr	r2, [pc, #220]	@ (800298c <TIM_Base_SetConfig+0x100>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d007      	beq.n	80028c4 <TIM_Base_SetConfig+0x38>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a36      	ldr	r2, [pc, #216]	@ (8002990 <TIM_Base_SetConfig+0x104>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d003      	beq.n	80028c4 <TIM_Base_SetConfig+0x38>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a35      	ldr	r2, [pc, #212]	@ (8002994 <TIM_Base_SetConfig+0x108>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d108      	bne.n	80028d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a2b      	ldr	r2, [pc, #172]	@ (8002988 <TIM_Base_SetConfig+0xfc>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d01b      	beq.n	8002916 <TIM_Base_SetConfig+0x8a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028e4:	d017      	beq.n	8002916 <TIM_Base_SetConfig+0x8a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a28      	ldr	r2, [pc, #160]	@ (800298c <TIM_Base_SetConfig+0x100>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d013      	beq.n	8002916 <TIM_Base_SetConfig+0x8a>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a27      	ldr	r2, [pc, #156]	@ (8002990 <TIM_Base_SetConfig+0x104>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00f      	beq.n	8002916 <TIM_Base_SetConfig+0x8a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a26      	ldr	r2, [pc, #152]	@ (8002994 <TIM_Base_SetConfig+0x108>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00b      	beq.n	8002916 <TIM_Base_SetConfig+0x8a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a25      	ldr	r2, [pc, #148]	@ (8002998 <TIM_Base_SetConfig+0x10c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d007      	beq.n	8002916 <TIM_Base_SetConfig+0x8a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a24      	ldr	r2, [pc, #144]	@ (800299c <TIM_Base_SetConfig+0x110>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d003      	beq.n	8002916 <TIM_Base_SetConfig+0x8a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a23      	ldr	r2, [pc, #140]	@ (80029a0 <TIM_Base_SetConfig+0x114>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d108      	bne.n	8002928 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800291c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4313      	orrs	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	4313      	orrs	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a0e      	ldr	r2, [pc, #56]	@ (8002988 <TIM_Base_SetConfig+0xfc>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d103      	bne.n	800295c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b01      	cmp	r3, #1
 800296c:	d105      	bne.n	800297a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f023 0201 	bic.w	r2, r3, #1
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	611a      	str	r2, [r3, #16]
  }
}
 800297a:	bf00      	nop
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40010000 	.word	0x40010000
 800298c:	40000400 	.word	0x40000400
 8002990:	40000800 	.word	0x40000800
 8002994:	40000c00 	.word	0x40000c00
 8002998:	40014000 	.word	0x40014000
 800299c:	40014400 	.word	0x40014400
 80029a0:	40014800 	.word	0x40014800

080029a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	f023 0201 	bic.w	r2, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f023 0303 	bic.w	r3, r3, #3
 80029da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f023 0302 	bic.w	r3, r3, #2
 80029ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a1c      	ldr	r2, [pc, #112]	@ (8002a6c <TIM_OC1_SetConfig+0xc8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d10c      	bne.n	8002a1a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f023 0308 	bic.w	r3, r3, #8
 8002a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f023 0304 	bic.w	r3, r3, #4
 8002a18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a13      	ldr	r2, [pc, #76]	@ (8002a6c <TIM_OC1_SetConfig+0xc8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d111      	bne.n	8002a46 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	621a      	str	r2, [r3, #32]
}
 8002a60:	bf00      	nop
 8002a62:	371c      	adds	r7, #28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	40010000 	.word	0x40010000

08002a70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	f023 0210 	bic.w	r2, r3, #16
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	021b      	lsls	r3, r3, #8
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	f023 0320 	bic.w	r3, r3, #32
 8002aba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a1e      	ldr	r2, [pc, #120]	@ (8002b44 <TIM_OC2_SetConfig+0xd4>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d10d      	bne.n	8002aec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	011b      	lsls	r3, r3, #4
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002aea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a15      	ldr	r2, [pc, #84]	@ (8002b44 <TIM_OC2_SetConfig+0xd4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d113      	bne.n	8002b1c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002afa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	621a      	str	r2, [r3, #32]
}
 8002b36:	bf00      	nop
 8002b38:	371c      	adds	r7, #28
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40010000 	.word	0x40010000

08002b48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f023 0303 	bic.w	r3, r3, #3
 8002b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	021b      	lsls	r3, r3, #8
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8002c18 <TIM_OC3_SetConfig+0xd0>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d10d      	bne.n	8002bc2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002bac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	021b      	lsls	r3, r3, #8
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002bc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a14      	ldr	r2, [pc, #80]	@ (8002c18 <TIM_OC3_SetConfig+0xd0>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d113      	bne.n	8002bf2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002bd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	621a      	str	r2, [r3, #32]
}
 8002c0c:	bf00      	nop
 8002c0e:	371c      	adds	r7, #28
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	40010000 	.word	0x40010000

08002c1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b087      	sub	sp, #28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	021b      	lsls	r3, r3, #8
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	031b      	lsls	r3, r3, #12
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a10      	ldr	r2, [pc, #64]	@ (8002cb8 <TIM_OC4_SetConfig+0x9c>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d109      	bne.n	8002c90 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	019b      	lsls	r3, r3, #6
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	621a      	str	r2, [r3, #32]
}
 8002caa:	bf00      	nop
 8002cac:	371c      	adds	r7, #28
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40010000 	.word	0x40010000

08002cbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b087      	sub	sp, #28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	f023 0201 	bic.w	r2, r3, #1
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ce6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f023 030a 	bic.w	r3, r3, #10
 8002cf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	621a      	str	r2, [r3, #32]
}
 8002d0e:	bf00      	nop
 8002d10:	371c      	adds	r7, #28
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b087      	sub	sp, #28
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	60f8      	str	r0, [r7, #12]
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	f023 0210 	bic.w	r2, r3, #16
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	031b      	lsls	r3, r3, #12
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002d56:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	621a      	str	r2, [r3, #32]
}
 8002d6e:	bf00      	nop
 8002d70:	371c      	adds	r7, #28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b085      	sub	sp, #20
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
 8002d82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f043 0307 	orr.w	r3, r3, #7
 8002d9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	609a      	str	r2, [r3, #8]
}
 8002da4:	bf00      	nop
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
 8002dbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002dca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	021a      	lsls	r2, r3, #8
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	609a      	str	r2, [r3, #8]
}
 8002de4:	bf00      	nop
 8002de6:	371c      	adds	r7, #28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f003 031f 	and.w	r3, r3, #31
 8002e02:	2201      	movs	r2, #1
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a1a      	ldr	r2, [r3, #32]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	43db      	mvns	r3, r3
 8002e12:	401a      	ands	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a1a      	ldr	r2, [r3, #32]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	f003 031f 	and.w	r3, r3, #31
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	fa01 f303 	lsl.w	r3, r1, r3
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	621a      	str	r2, [r3, #32]
}
 8002e2e:	bf00      	nop
 8002e30:	371c      	adds	r7, #28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e050      	b.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a1c      	ldr	r2, [pc, #112]	@ (8002f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d018      	beq.n	8002eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ea0:	d013      	beq.n	8002eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a18      	ldr	r2, [pc, #96]	@ (8002f08 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d00e      	beq.n	8002eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a16      	ldr	r2, [pc, #88]	@ (8002f0c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d009      	beq.n	8002eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a15      	ldr	r2, [pc, #84]	@ (8002f10 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d004      	beq.n	8002eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a13      	ldr	r2, [pc, #76]	@ (8002f14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ed0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40010000 	.word	0x40010000
 8002f08:	40000400 	.word	0x40000400
 8002f0c:	40000800 	.word	0x40000800
 8002f10:	40000c00 	.word	0x40000c00
 8002f14:	40014000 	.word	0x40014000

08002f18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e042      	b.n	8002fb0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d106      	bne.n	8002f44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7fd ffc0 	bl	8000ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2224      	movs	r2, #36	@ 0x24
 8002f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 fdbd 	bl	8003adc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	695a      	ldr	r2, [r3, #20]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08a      	sub	sp, #40	@ 0x28
 8002fbc:	af02      	add	r7, sp, #8
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	603b      	str	r3, [r7, #0]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b20      	cmp	r3, #32
 8002fd6:	d175      	bne.n	80030c4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <HAL_UART_Transmit+0x2c>
 8002fde:	88fb      	ldrh	r3, [r7, #6]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e06e      	b.n	80030c6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2221      	movs	r2, #33	@ 0x21
 8002ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ff6:	f7fe f8fb 	bl	80011f0 <HAL_GetTick>
 8002ffa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	88fa      	ldrh	r2, [r7, #6]
 8003000:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	88fa      	ldrh	r2, [r7, #6]
 8003006:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003010:	d108      	bne.n	8003024 <HAL_UART_Transmit+0x6c>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d104      	bne.n	8003024 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800301a:	2300      	movs	r3, #0
 800301c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	61bb      	str	r3, [r7, #24]
 8003022:	e003      	b.n	800302c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003028:	2300      	movs	r3, #0
 800302a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800302c:	e02e      	b.n	800308c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2200      	movs	r2, #0
 8003036:	2180      	movs	r1, #128	@ 0x80
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 fb1f 	bl	800367c <UART_WaitOnFlagUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e03a      	b.n	80030c6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10b      	bne.n	800306e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	881b      	ldrh	r3, [r3, #0]
 800305a:	461a      	mov	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003064:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	3302      	adds	r3, #2
 800306a:	61bb      	str	r3, [r7, #24]
 800306c:	e007      	b.n	800307e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	781a      	ldrb	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	3301      	adds	r3, #1
 800307c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003082:	b29b      	uxth	r3, r3
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003090:	b29b      	uxth	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1cb      	bne.n	800302e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2200      	movs	r2, #0
 800309e:	2140      	movs	r1, #64	@ 0x40
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 faeb 	bl	800367c <UART_WaitOnFlagUntilTimeout>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2220      	movs	r2, #32
 80030b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e006      	b.n	80030c6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	e000      	b.n	80030c6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80030c4:	2302      	movs	r3, #2
  }
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3720      	adds	r7, #32
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b084      	sub	sp, #16
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	60f8      	str	r0, [r7, #12]
 80030d6:	60b9      	str	r1, [r7, #8]
 80030d8:	4613      	mov	r3, r2
 80030da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	d112      	bne.n	800310e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <HAL_UART_Receive_IT+0x26>
 80030ee:	88fb      	ldrh	r3, [r7, #6]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e00b      	b.n	8003110 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	461a      	mov	r2, r3
 8003102:	68b9      	ldr	r1, [r7, #8]
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 fb12 	bl	800372e <UART_Start_Receive_IT>
 800310a:	4603      	mov	r3, r0
 800310c:	e000      	b.n	8003110 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800310e:	2302      	movs	r3, #2
  }
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b0ba      	sub	sp, #232	@ 0xe8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800313e:	2300      	movs	r3, #0
 8003140:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003144:	2300      	movs	r3, #0
 8003146:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800314a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003156:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10f      	bne.n	800317e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800315e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	2b00      	cmp	r3, #0
 8003168:	d009      	beq.n	800317e <HAL_UART_IRQHandler+0x66>
 800316a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800316e:	f003 0320 	and.w	r3, r3, #32
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fbf2 	bl	8003960 <UART_Receive_IT>
      return;
 800317c:	e25b      	b.n	8003636 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800317e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 80de 	beq.w	8003344 <HAL_UART_IRQHandler+0x22c>
 8003188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d106      	bne.n	80031a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003198:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 80d1 	beq.w	8003344 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00b      	beq.n	80031c6 <HAL_UART_IRQHandler+0xae>
 80031ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d005      	beq.n	80031c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031be:	f043 0201 	orr.w	r2, r3, #1
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00b      	beq.n	80031ea <HAL_UART_IRQHandler+0xd2>
 80031d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d005      	beq.n	80031ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e2:	f043 0202 	orr.w	r2, r3, #2
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00b      	beq.n	800320e <HAL_UART_IRQHandler+0xf6>
 80031f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d005      	beq.n	800320e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003206:	f043 0204 	orr.w	r2, r3, #4
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800320e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b00      	cmp	r3, #0
 8003218:	d011      	beq.n	800323e <HAL_UART_IRQHandler+0x126>
 800321a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800321e:	f003 0320 	and.w	r3, r3, #32
 8003222:	2b00      	cmp	r3, #0
 8003224:	d105      	bne.n	8003232 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003226:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d005      	beq.n	800323e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003236:	f043 0208 	orr.w	r2, r3, #8
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 81f2 	beq.w	800362c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800324c:	f003 0320 	and.w	r3, r3, #32
 8003250:	2b00      	cmp	r3, #0
 8003252:	d008      	beq.n	8003266 <HAL_UART_IRQHandler+0x14e>
 8003254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 fb7d 	bl	8003960 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003270:	2b40      	cmp	r3, #64	@ 0x40
 8003272:	bf0c      	ite	eq
 8003274:	2301      	moveq	r3, #1
 8003276:	2300      	movne	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d103      	bne.n	8003292 <HAL_UART_IRQHandler+0x17a>
 800328a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800328e:	2b00      	cmp	r3, #0
 8003290:	d04f      	beq.n	8003332 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 fa85 	bl	80037a2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a2:	2b40      	cmp	r3, #64	@ 0x40
 80032a4:	d141      	bne.n	800332a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	3314      	adds	r3, #20
 80032ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032b4:	e853 3f00 	ldrex	r3, [r3]
 80032b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80032bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	3314      	adds	r3, #20
 80032ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80032d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80032d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80032de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80032e2:	e841 2300 	strex	r3, r2, [r1]
 80032e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80032ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1d9      	bne.n	80032a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d013      	beq.n	8003322 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032fe:	4a7e      	ldr	r2, [pc, #504]	@ (80034f8 <HAL_UART_IRQHandler+0x3e0>)
 8003300:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe f923 	bl	8001552 <HAL_DMA_Abort_IT>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d016      	beq.n	8003340 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800331c:	4610      	mov	r0, r2
 800331e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003320:	e00e      	b.n	8003340 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f994 	bl	8003650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003328:	e00a      	b.n	8003340 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f990 	bl	8003650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003330:	e006      	b.n	8003340 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f98c 	bl	8003650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800333e:	e175      	b.n	800362c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003340:	bf00      	nop
    return;
 8003342:	e173      	b.n	800362c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003348:	2b01      	cmp	r3, #1
 800334a:	f040 814f 	bne.w	80035ec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800334e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003352:	f003 0310 	and.w	r3, r3, #16
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 8148 	beq.w	80035ec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800335c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003360:	f003 0310 	and.w	r3, r3, #16
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 8141 	beq.w	80035ec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800336a:	2300      	movs	r3, #0
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	60bb      	str	r3, [r7, #8]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800338a:	2b40      	cmp	r3, #64	@ 0x40
 800338c:	f040 80b6 	bne.w	80034fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800339c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 8145 	beq.w	8003630 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80033aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033ae:	429a      	cmp	r2, r3
 80033b0:	f080 813e 	bcs.w	8003630 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033c6:	f000 8088 	beq.w	80034da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	330c      	adds	r3, #12
 80033d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033d8:	e853 3f00 	ldrex	r3, [r3]
 80033dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80033e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	330c      	adds	r3, #12
 80033f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80033f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003402:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003406:	e841 2300 	strex	r3, r2, [r1]
 800340a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800340e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1d9      	bne.n	80033ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3314      	adds	r3, #20
 800341c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003420:	e853 3f00 	ldrex	r3, [r3]
 8003424:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003426:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003428:	f023 0301 	bic.w	r3, r3, #1
 800342c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	3314      	adds	r3, #20
 8003436:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800343a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800343e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003440:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003442:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003446:	e841 2300 	strex	r3, r2, [r1]
 800344a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800344c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1e1      	bne.n	8003416 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	3314      	adds	r3, #20
 8003458:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800345c:	e853 3f00 	ldrex	r3, [r3]
 8003460:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003462:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003464:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003468:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	3314      	adds	r3, #20
 8003472:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003476:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003478:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800347c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800347e:	e841 2300 	strex	r3, r2, [r1]
 8003482:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003484:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1e3      	bne.n	8003452 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2220      	movs	r2, #32
 800348e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	330c      	adds	r3, #12
 800349e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034a2:	e853 3f00 	ldrex	r3, [r3]
 80034a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80034a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034aa:	f023 0310 	bic.w	r3, r3, #16
 80034ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	330c      	adds	r3, #12
 80034b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80034bc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80034be:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80034c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034c4:	e841 2300 	strex	r3, r2, [r1]
 80034c8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80034ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1e3      	bne.n	8003498 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fd ffcc 	bl	8001472 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2202      	movs	r2, #2
 80034de:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	4619      	mov	r1, r3
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f8b7 	bl	8003664 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034f6:	e09b      	b.n	8003630 <HAL_UART_IRQHandler+0x518>
 80034f8:	08003869 	.word	0x08003869
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003504:	b29b      	uxth	r3, r3
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003510:	b29b      	uxth	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 808e 	beq.w	8003634 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003518:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 8089 	beq.w	8003634 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	330c      	adds	r3, #12
 8003528:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800352c:	e853 3f00 	ldrex	r3, [r3]
 8003530:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003534:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003538:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	330c      	adds	r3, #12
 8003542:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003546:	647a      	str	r2, [r7, #68]	@ 0x44
 8003548:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800354c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800354e:	e841 2300 	strex	r3, r2, [r1]
 8003552:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1e3      	bne.n	8003522 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	3314      	adds	r3, #20
 8003560:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003564:	e853 3f00 	ldrex	r3, [r3]
 8003568:	623b      	str	r3, [r7, #32]
   return(result);
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	f023 0301 	bic.w	r3, r3, #1
 8003570:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	3314      	adds	r3, #20
 800357a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800357e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003580:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003582:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003584:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003586:	e841 2300 	strex	r3, r2, [r1]
 800358a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800358c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1e3      	bne.n	800355a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2220      	movs	r2, #32
 8003596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	330c      	adds	r3, #12
 80035a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	e853 3f00 	ldrex	r3, [r3]
 80035ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0310 	bic.w	r3, r3, #16
 80035b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	330c      	adds	r3, #12
 80035c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80035c4:	61fa      	str	r2, [r7, #28]
 80035c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c8:	69b9      	ldr	r1, [r7, #24]
 80035ca:	69fa      	ldr	r2, [r7, #28]
 80035cc:	e841 2300 	strex	r3, r2, [r1]
 80035d0:	617b      	str	r3, [r7, #20]
   return(result);
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1e3      	bne.n	80035a0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035e2:	4619      	mov	r1, r3
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f83d 	bl	8003664 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035ea:	e023      	b.n	8003634 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d009      	beq.n	800360c <HAL_UART_IRQHandler+0x4f4>
 80035f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f943 	bl	8003890 <UART_Transmit_IT>
    return;
 800360a:	e014      	b.n	8003636 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800360c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00e      	beq.n	8003636 <HAL_UART_IRQHandler+0x51e>
 8003618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800361c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003620:	2b00      	cmp	r3, #0
 8003622:	d008      	beq.n	8003636 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f983 	bl	8003930 <UART_EndTransmit_IT>
    return;
 800362a:	e004      	b.n	8003636 <HAL_UART_IRQHandler+0x51e>
    return;
 800362c:	bf00      	nop
 800362e:	e002      	b.n	8003636 <HAL_UART_IRQHandler+0x51e>
      return;
 8003630:	bf00      	nop
 8003632:	e000      	b.n	8003636 <HAL_UART_IRQHandler+0x51e>
      return;
 8003634:	bf00      	nop
  }
}
 8003636:	37e8      	adds	r7, #232	@ 0xe8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	460b      	mov	r3, r1
 800366e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	603b      	str	r3, [r7, #0]
 8003688:	4613      	mov	r3, r2
 800368a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800368c:	e03b      	b.n	8003706 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003694:	d037      	beq.n	8003706 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003696:	f7fd fdab 	bl	80011f0 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	6a3a      	ldr	r2, [r7, #32]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d302      	bcc.n	80036ac <UART_WaitOnFlagUntilTimeout+0x30>
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e03a      	b.n	8003726 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d023      	beq.n	8003706 <UART_WaitOnFlagUntilTimeout+0x8a>
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b80      	cmp	r3, #128	@ 0x80
 80036c2:	d020      	beq.n	8003706 <UART_WaitOnFlagUntilTimeout+0x8a>
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b40      	cmp	r3, #64	@ 0x40
 80036c8:	d01d      	beq.n	8003706 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0308 	and.w	r3, r3, #8
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d116      	bne.n	8003706 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 f857 	bl	80037a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2208      	movs	r2, #8
 80036f8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e00f      	b.n	8003726 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4013      	ands	r3, r2
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	429a      	cmp	r2, r3
 8003714:	bf0c      	ite	eq
 8003716:	2301      	moveq	r3, #1
 8003718:	2300      	movne	r3, #0
 800371a:	b2db      	uxtb	r3, r3
 800371c:	461a      	mov	r2, r3
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	429a      	cmp	r2, r3
 8003722:	d0b4      	beq.n	800368e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800372e:	b480      	push	{r7}
 8003730:	b085      	sub	sp, #20
 8003732:	af00      	add	r7, sp, #0
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	4613      	mov	r3, r2
 800373a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	88fa      	ldrh	r2, [r7, #6]
 8003746:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	88fa      	ldrh	r2, [r7, #6]
 800374c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2222      	movs	r2, #34	@ 0x22
 8003758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d007      	beq.n	8003774 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003772:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695a      	ldr	r2, [r3, #20]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0201 	orr.w	r2, r2, #1
 8003782:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0220 	orr.w	r2, r2, #32
 8003792:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b095      	sub	sp, #84	@ 0x54
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	330c      	adds	r3, #12
 80037b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037b4:	e853 3f00 	ldrex	r3, [r3]
 80037b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	330c      	adds	r3, #12
 80037c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037ca:	643a      	str	r2, [r7, #64]	@ 0x40
 80037cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037d2:	e841 2300 	strex	r3, r2, [r1]
 80037d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1e5      	bne.n	80037aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3314      	adds	r3, #20
 80037e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	e853 3f00 	ldrex	r3, [r3]
 80037ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	f023 0301 	bic.w	r3, r3, #1
 80037f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	3314      	adds	r3, #20
 80037fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003800:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003802:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003804:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003806:	e841 2300 	strex	r3, r2, [r1]
 800380a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800380c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1e5      	bne.n	80037de <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003816:	2b01      	cmp	r3, #1
 8003818:	d119      	bne.n	800384e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	330c      	adds	r3, #12
 8003820:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	e853 3f00 	ldrex	r3, [r3]
 8003828:	60bb      	str	r3, [r7, #8]
   return(result);
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f023 0310 	bic.w	r3, r3, #16
 8003830:	647b      	str	r3, [r7, #68]	@ 0x44
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	330c      	adds	r3, #12
 8003838:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800383a:	61ba      	str	r2, [r7, #24]
 800383c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383e:	6979      	ldr	r1, [r7, #20]
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	e841 2300 	strex	r3, r2, [r1]
 8003846:	613b      	str	r3, [r7, #16]
   return(result);
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1e5      	bne.n	800381a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800385c:	bf00      	nop
 800385e:	3754      	adds	r7, #84	@ 0x54
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003874:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f7ff fee4 	bl	8003650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003888:	bf00      	nop
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b21      	cmp	r3, #33	@ 0x21
 80038a2:	d13e      	bne.n	8003922 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038ac:	d114      	bne.n	80038d8 <UART_Transmit_IT+0x48>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d110      	bne.n	80038d8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	461a      	mov	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038ca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	1c9a      	adds	r2, r3, #2
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	621a      	str	r2, [r3, #32]
 80038d6:	e008      	b.n	80038ea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	1c59      	adds	r1, r3, #1
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6211      	str	r1, [r2, #32]
 80038e2:	781a      	ldrb	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	4619      	mov	r1, r3
 80038f8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10f      	bne.n	800391e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68da      	ldr	r2, [r3, #12]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800390c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800391c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	e000      	b.n	8003924 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003922:	2302      	movs	r3, #2
  }
}
 8003924:	4618      	mov	r0, r3
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003946:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7ff fe73 	bl	800363c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08c      	sub	sp, #48	@ 0x30
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b22      	cmp	r3, #34	@ 0x22
 8003972:	f040 80ae 	bne.w	8003ad2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800397e:	d117      	bne.n	80039b0 <UART_Receive_IT+0x50>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d113      	bne.n	80039b0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003988:	2300      	movs	r3, #0
 800398a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003990:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	b29b      	uxth	r3, r3
 800399a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800399e:	b29a      	uxth	r2, r3
 80039a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a8:	1c9a      	adds	r2, r3, #2
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80039ae:	e026      	b.n	80039fe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80039b6:	2300      	movs	r3, #0
 80039b8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039c2:	d007      	beq.n	80039d4 <UART_Receive_IT+0x74>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10a      	bne.n	80039e2 <UART_Receive_IT+0x82>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d106      	bne.n	80039e2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039de:	701a      	strb	r2, [r3, #0]
 80039e0:	e008      	b.n	80039f4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d15d      	bne.n	8003ace <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0220 	bic.w	r2, r2, #32
 8003a20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695a      	ldr	r2, [r3, #20]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0201 	bic.w	r2, r2, #1
 8003a40:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d135      	bne.n	8003ac4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	330c      	adds	r3, #12
 8003a64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	e853 3f00 	ldrex	r3, [r3]
 8003a6c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f023 0310 	bic.w	r3, r3, #16
 8003a74:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	330c      	adds	r3, #12
 8003a7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a7e:	623a      	str	r2, [r7, #32]
 8003a80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a82:	69f9      	ldr	r1, [r7, #28]
 8003a84:	6a3a      	ldr	r2, [r7, #32]
 8003a86:	e841 2300 	strex	r3, r2, [r1]
 8003a8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1e5      	bne.n	8003a5e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0310 	and.w	r3, r3, #16
 8003a9c:	2b10      	cmp	r3, #16
 8003a9e:	d10a      	bne.n	8003ab6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003aba:	4619      	mov	r1, r3
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7ff fdd1 	bl	8003664 <HAL_UARTEx_RxEventCallback>
 8003ac2:	e002      	b.n	8003aca <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7fc ff8d 	bl	80009e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	e002      	b.n	8003ad4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e000      	b.n	8003ad4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003ad2:	2302      	movs	r3, #2
  }
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3730      	adds	r7, #48	@ 0x30
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ae0:	b0c0      	sub	sp, #256	@ 0x100
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af8:	68d9      	ldr	r1, [r3, #12]
 8003afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	ea40 0301 	orr.w	r3, r0, r1
 8003b04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003b34:	f021 010c 	bic.w	r1, r1, #12
 8003b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b42:	430b      	orrs	r3, r1
 8003b44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b56:	6999      	ldr	r1, [r3, #24]
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	ea40 0301 	orr.w	r3, r0, r1
 8003b62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	4b8f      	ldr	r3, [pc, #572]	@ (8003da8 <UART_SetConfig+0x2cc>)
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d005      	beq.n	8003b7c <UART_SetConfig+0xa0>
 8003b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	4b8d      	ldr	r3, [pc, #564]	@ (8003dac <UART_SetConfig+0x2d0>)
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d104      	bne.n	8003b86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b7c:	f7fe fb2c 	bl	80021d8 <HAL_RCC_GetPCLK2Freq>
 8003b80:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003b84:	e003      	b.n	8003b8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b86:	f7fe fb13 	bl	80021b0 <HAL_RCC_GetPCLK1Freq>
 8003b8a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b98:	f040 810c 	bne.w	8003db4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ba6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003baa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003bae:	4622      	mov	r2, r4
 8003bb0:	462b      	mov	r3, r5
 8003bb2:	1891      	adds	r1, r2, r2
 8003bb4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003bb6:	415b      	adcs	r3, r3
 8003bb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003bbe:	4621      	mov	r1, r4
 8003bc0:	eb12 0801 	adds.w	r8, r2, r1
 8003bc4:	4629      	mov	r1, r5
 8003bc6:	eb43 0901 	adc.w	r9, r3, r1
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	f04f 0300 	mov.w	r3, #0
 8003bd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bde:	4690      	mov	r8, r2
 8003be0:	4699      	mov	r9, r3
 8003be2:	4623      	mov	r3, r4
 8003be4:	eb18 0303 	adds.w	r3, r8, r3
 8003be8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003bec:	462b      	mov	r3, r5
 8003bee:	eb49 0303 	adc.w	r3, r9, r3
 8003bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c02:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	18db      	adds	r3, r3, r3
 8003c0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c10:	4613      	mov	r3, r2
 8003c12:	eb42 0303 	adc.w	r3, r2, r3
 8003c16:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003c20:	f7fc fb36 	bl	8000290 <__aeabi_uldivmod>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4b61      	ldr	r3, [pc, #388]	@ (8003db0 <UART_SetConfig+0x2d4>)
 8003c2a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	011c      	lsls	r4, r3, #4
 8003c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c36:	2200      	movs	r2, #0
 8003c38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c3c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003c44:	4642      	mov	r2, r8
 8003c46:	464b      	mov	r3, r9
 8003c48:	1891      	adds	r1, r2, r2
 8003c4a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003c4c:	415b      	adcs	r3, r3
 8003c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c54:	4641      	mov	r1, r8
 8003c56:	eb12 0a01 	adds.w	sl, r2, r1
 8003c5a:	4649      	mov	r1, r9
 8003c5c:	eb43 0b01 	adc.w	fp, r3, r1
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c74:	4692      	mov	sl, r2
 8003c76:	469b      	mov	fp, r3
 8003c78:	4643      	mov	r3, r8
 8003c7a:	eb1a 0303 	adds.w	r3, sl, r3
 8003c7e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c82:	464b      	mov	r3, r9
 8003c84:	eb4b 0303 	adc.w	r3, fp, r3
 8003c88:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c98:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003c9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	18db      	adds	r3, r3, r3
 8003ca4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	eb42 0303 	adc.w	r3, r2, r3
 8003cac:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003cb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003cb6:	f7fc faeb 	bl	8000290 <__aeabi_uldivmod>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	4b3b      	ldr	r3, [pc, #236]	@ (8003db0 <UART_SetConfig+0x2d4>)
 8003cc2:	fba3 2301 	umull	r2, r3, r3, r1
 8003cc6:	095b      	lsrs	r3, r3, #5
 8003cc8:	2264      	movs	r2, #100	@ 0x64
 8003cca:	fb02 f303 	mul.w	r3, r2, r3
 8003cce:	1acb      	subs	r3, r1, r3
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003cd6:	4b36      	ldr	r3, [pc, #216]	@ (8003db0 <UART_SetConfig+0x2d4>)
 8003cd8:	fba3 2302 	umull	r2, r3, r3, r2
 8003cdc:	095b      	lsrs	r3, r3, #5
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003ce4:	441c      	add	r4, r3
 8003ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cea:	2200      	movs	r2, #0
 8003cec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cf0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003cf4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003cf8:	4642      	mov	r2, r8
 8003cfa:	464b      	mov	r3, r9
 8003cfc:	1891      	adds	r1, r2, r2
 8003cfe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d00:	415b      	adcs	r3, r3
 8003d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d08:	4641      	mov	r1, r8
 8003d0a:	1851      	adds	r1, r2, r1
 8003d0c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d0e:	4649      	mov	r1, r9
 8003d10:	414b      	adcs	r3, r1
 8003d12:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	f04f 0300 	mov.w	r3, #0
 8003d1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003d20:	4659      	mov	r1, fp
 8003d22:	00cb      	lsls	r3, r1, #3
 8003d24:	4651      	mov	r1, sl
 8003d26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d2a:	4651      	mov	r1, sl
 8003d2c:	00ca      	lsls	r2, r1, #3
 8003d2e:	4610      	mov	r0, r2
 8003d30:	4619      	mov	r1, r3
 8003d32:	4603      	mov	r3, r0
 8003d34:	4642      	mov	r2, r8
 8003d36:	189b      	adds	r3, r3, r2
 8003d38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d3c:	464b      	mov	r3, r9
 8003d3e:	460a      	mov	r2, r1
 8003d40:	eb42 0303 	adc.w	r3, r2, r3
 8003d44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d54:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	18db      	adds	r3, r3, r3
 8003d60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d62:	4613      	mov	r3, r2
 8003d64:	eb42 0303 	adc.w	r3, r2, r3
 8003d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d72:	f7fc fa8d 	bl	8000290 <__aeabi_uldivmod>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003db0 <UART_SetConfig+0x2d4>)
 8003d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d80:	095b      	lsrs	r3, r3, #5
 8003d82:	2164      	movs	r1, #100	@ 0x64
 8003d84:	fb01 f303 	mul.w	r3, r1, r3
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	3332      	adds	r3, #50	@ 0x32
 8003d8e:	4a08      	ldr	r2, [pc, #32]	@ (8003db0 <UART_SetConfig+0x2d4>)
 8003d90:	fba2 2303 	umull	r2, r3, r2, r3
 8003d94:	095b      	lsrs	r3, r3, #5
 8003d96:	f003 0207 	and.w	r2, r3, #7
 8003d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4422      	add	r2, r4
 8003da2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003da4:	e106      	b.n	8003fb4 <UART_SetConfig+0x4d8>
 8003da6:	bf00      	nop
 8003da8:	40011000 	.word	0x40011000
 8003dac:	40011400 	.word	0x40011400
 8003db0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003db4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003db8:	2200      	movs	r2, #0
 8003dba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003dbe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003dc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003dc6:	4642      	mov	r2, r8
 8003dc8:	464b      	mov	r3, r9
 8003dca:	1891      	adds	r1, r2, r2
 8003dcc:	6239      	str	r1, [r7, #32]
 8003dce:	415b      	adcs	r3, r3
 8003dd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dd6:	4641      	mov	r1, r8
 8003dd8:	1854      	adds	r4, r2, r1
 8003dda:	4649      	mov	r1, r9
 8003ddc:	eb43 0501 	adc.w	r5, r3, r1
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	00eb      	lsls	r3, r5, #3
 8003dea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dee:	00e2      	lsls	r2, r4, #3
 8003df0:	4614      	mov	r4, r2
 8003df2:	461d      	mov	r5, r3
 8003df4:	4643      	mov	r3, r8
 8003df6:	18e3      	adds	r3, r4, r3
 8003df8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003dfc:	464b      	mov	r3, r9
 8003dfe:	eb45 0303 	adc.w	r3, r5, r3
 8003e02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e12:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e22:	4629      	mov	r1, r5
 8003e24:	008b      	lsls	r3, r1, #2
 8003e26:	4621      	mov	r1, r4
 8003e28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e2c:	4621      	mov	r1, r4
 8003e2e:	008a      	lsls	r2, r1, #2
 8003e30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003e34:	f7fc fa2c 	bl	8000290 <__aeabi_uldivmod>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	4b60      	ldr	r3, [pc, #384]	@ (8003fc0 <UART_SetConfig+0x4e4>)
 8003e3e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	011c      	lsls	r4, r3, #4
 8003e46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e50:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e58:	4642      	mov	r2, r8
 8003e5a:	464b      	mov	r3, r9
 8003e5c:	1891      	adds	r1, r2, r2
 8003e5e:	61b9      	str	r1, [r7, #24]
 8003e60:	415b      	adcs	r3, r3
 8003e62:	61fb      	str	r3, [r7, #28]
 8003e64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e68:	4641      	mov	r1, r8
 8003e6a:	1851      	adds	r1, r2, r1
 8003e6c:	6139      	str	r1, [r7, #16]
 8003e6e:	4649      	mov	r1, r9
 8003e70:	414b      	adcs	r3, r1
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e80:	4659      	mov	r1, fp
 8003e82:	00cb      	lsls	r3, r1, #3
 8003e84:	4651      	mov	r1, sl
 8003e86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e8a:	4651      	mov	r1, sl
 8003e8c:	00ca      	lsls	r2, r1, #3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	4619      	mov	r1, r3
 8003e92:	4603      	mov	r3, r0
 8003e94:	4642      	mov	r2, r8
 8003e96:	189b      	adds	r3, r3, r2
 8003e98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e9c:	464b      	mov	r3, r9
 8003e9e:	460a      	mov	r2, r1
 8003ea0:	eb42 0303 	adc.w	r3, r2, r3
 8003ea4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003eb2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003eb4:	f04f 0200 	mov.w	r2, #0
 8003eb8:	f04f 0300 	mov.w	r3, #0
 8003ebc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ec0:	4649      	mov	r1, r9
 8003ec2:	008b      	lsls	r3, r1, #2
 8003ec4:	4641      	mov	r1, r8
 8003ec6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eca:	4641      	mov	r1, r8
 8003ecc:	008a      	lsls	r2, r1, #2
 8003ece:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003ed2:	f7fc f9dd 	bl	8000290 <__aeabi_uldivmod>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4611      	mov	r1, r2
 8003edc:	4b38      	ldr	r3, [pc, #224]	@ (8003fc0 <UART_SetConfig+0x4e4>)
 8003ede:	fba3 2301 	umull	r2, r3, r3, r1
 8003ee2:	095b      	lsrs	r3, r3, #5
 8003ee4:	2264      	movs	r2, #100	@ 0x64
 8003ee6:	fb02 f303 	mul.w	r3, r2, r3
 8003eea:	1acb      	subs	r3, r1, r3
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	3332      	adds	r3, #50	@ 0x32
 8003ef0:	4a33      	ldr	r2, [pc, #204]	@ (8003fc0 <UART_SetConfig+0x4e4>)
 8003ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef6:	095b      	lsrs	r3, r3, #5
 8003ef8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003efc:	441c      	add	r4, r3
 8003efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f02:	2200      	movs	r2, #0
 8003f04:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f06:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f0c:	4642      	mov	r2, r8
 8003f0e:	464b      	mov	r3, r9
 8003f10:	1891      	adds	r1, r2, r2
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	415b      	adcs	r3, r3
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f1c:	4641      	mov	r1, r8
 8003f1e:	1851      	adds	r1, r2, r1
 8003f20:	6039      	str	r1, [r7, #0]
 8003f22:	4649      	mov	r1, r9
 8003f24:	414b      	adcs	r3, r1
 8003f26:	607b      	str	r3, [r7, #4]
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f34:	4659      	mov	r1, fp
 8003f36:	00cb      	lsls	r3, r1, #3
 8003f38:	4651      	mov	r1, sl
 8003f3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f3e:	4651      	mov	r1, sl
 8003f40:	00ca      	lsls	r2, r1, #3
 8003f42:	4610      	mov	r0, r2
 8003f44:	4619      	mov	r1, r3
 8003f46:	4603      	mov	r3, r0
 8003f48:	4642      	mov	r2, r8
 8003f4a:	189b      	adds	r3, r3, r2
 8003f4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f4e:	464b      	mov	r3, r9
 8003f50:	460a      	mov	r2, r1
 8003f52:	eb42 0303 	adc.w	r3, r2, r3
 8003f56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f62:	667a      	str	r2, [r7, #100]	@ 0x64
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	f04f 0300 	mov.w	r3, #0
 8003f6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f70:	4649      	mov	r1, r9
 8003f72:	008b      	lsls	r3, r1, #2
 8003f74:	4641      	mov	r1, r8
 8003f76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f7a:	4641      	mov	r1, r8
 8003f7c:	008a      	lsls	r2, r1, #2
 8003f7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003f82:	f7fc f985 	bl	8000290 <__aeabi_uldivmod>
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003fc0 <UART_SetConfig+0x4e4>)
 8003f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f90:	095b      	lsrs	r3, r3, #5
 8003f92:	2164      	movs	r1, #100	@ 0x64
 8003f94:	fb01 f303 	mul.w	r3, r1, r3
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	011b      	lsls	r3, r3, #4
 8003f9c:	3332      	adds	r3, #50	@ 0x32
 8003f9e:	4a08      	ldr	r2, [pc, #32]	@ (8003fc0 <UART_SetConfig+0x4e4>)
 8003fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa4:	095b      	lsrs	r3, r3, #5
 8003fa6:	f003 020f 	and.w	r2, r3, #15
 8003faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4422      	add	r2, r4
 8003fb2:	609a      	str	r2, [r3, #8]
}
 8003fb4:	bf00      	nop
 8003fb6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fc0:	51eb851f 	.word	0x51eb851f

08003fc4 <atoi>:
 8003fc4:	220a      	movs	r2, #10
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	f000 b8ce 	b.w	8004168 <strtol>

08003fcc <sniprintf>:
 8003fcc:	b40c      	push	{r2, r3}
 8003fce:	b530      	push	{r4, r5, lr}
 8003fd0:	4b17      	ldr	r3, [pc, #92]	@ (8004030 <sniprintf+0x64>)
 8003fd2:	1e0c      	subs	r4, r1, #0
 8003fd4:	681d      	ldr	r5, [r3, #0]
 8003fd6:	b09d      	sub	sp, #116	@ 0x74
 8003fd8:	da08      	bge.n	8003fec <sniprintf+0x20>
 8003fda:	238b      	movs	r3, #139	@ 0x8b
 8003fdc:	602b      	str	r3, [r5, #0]
 8003fde:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003fe2:	b01d      	add	sp, #116	@ 0x74
 8003fe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fe8:	b002      	add	sp, #8
 8003fea:	4770      	bx	lr
 8003fec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003ff0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003ff4:	bf14      	ite	ne
 8003ff6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8003ffa:	4623      	moveq	r3, r4
 8003ffc:	9304      	str	r3, [sp, #16]
 8003ffe:	9307      	str	r3, [sp, #28]
 8004000:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004004:	9002      	str	r0, [sp, #8]
 8004006:	9006      	str	r0, [sp, #24]
 8004008:	f8ad 3016 	strh.w	r3, [sp, #22]
 800400c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800400e:	ab21      	add	r3, sp, #132	@ 0x84
 8004010:	a902      	add	r1, sp, #8
 8004012:	4628      	mov	r0, r5
 8004014:	9301      	str	r3, [sp, #4]
 8004016:	f000 f941 	bl	800429c <_svfiprintf_r>
 800401a:	1c43      	adds	r3, r0, #1
 800401c:	bfbc      	itt	lt
 800401e:	238b      	movlt	r3, #139	@ 0x8b
 8004020:	602b      	strlt	r3, [r5, #0]
 8004022:	2c00      	cmp	r4, #0
 8004024:	d0dd      	beq.n	8003fe2 <sniprintf+0x16>
 8004026:	9b02      	ldr	r3, [sp, #8]
 8004028:	2200      	movs	r2, #0
 800402a:	701a      	strb	r2, [r3, #0]
 800402c:	e7d9      	b.n	8003fe2 <sniprintf+0x16>
 800402e:	bf00      	nop
 8004030:	2000000c 	.word	0x2000000c

08004034 <siprintf>:
 8004034:	b40e      	push	{r1, r2, r3}
 8004036:	b500      	push	{lr}
 8004038:	b09c      	sub	sp, #112	@ 0x70
 800403a:	ab1d      	add	r3, sp, #116	@ 0x74
 800403c:	9002      	str	r0, [sp, #8]
 800403e:	9006      	str	r0, [sp, #24]
 8004040:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004044:	4809      	ldr	r0, [pc, #36]	@ (800406c <siprintf+0x38>)
 8004046:	9107      	str	r1, [sp, #28]
 8004048:	9104      	str	r1, [sp, #16]
 800404a:	4909      	ldr	r1, [pc, #36]	@ (8004070 <siprintf+0x3c>)
 800404c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004050:	9105      	str	r1, [sp, #20]
 8004052:	6800      	ldr	r0, [r0, #0]
 8004054:	9301      	str	r3, [sp, #4]
 8004056:	a902      	add	r1, sp, #8
 8004058:	f000 f920 	bl	800429c <_svfiprintf_r>
 800405c:	9b02      	ldr	r3, [sp, #8]
 800405e:	2200      	movs	r2, #0
 8004060:	701a      	strb	r2, [r3, #0]
 8004062:	b01c      	add	sp, #112	@ 0x70
 8004064:	f85d eb04 	ldr.w	lr, [sp], #4
 8004068:	b003      	add	sp, #12
 800406a:	4770      	bx	lr
 800406c:	2000000c 	.word	0x2000000c
 8004070:	ffff0208 	.word	0xffff0208

08004074 <_strtol_l.constprop.0>:
 8004074:	2b24      	cmp	r3, #36	@ 0x24
 8004076:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800407a:	4686      	mov	lr, r0
 800407c:	4690      	mov	r8, r2
 800407e:	d801      	bhi.n	8004084 <_strtol_l.constprop.0+0x10>
 8004080:	2b01      	cmp	r3, #1
 8004082:	d106      	bne.n	8004092 <_strtol_l.constprop.0+0x1e>
 8004084:	f000 f882 	bl	800418c <__errno>
 8004088:	2316      	movs	r3, #22
 800408a:	6003      	str	r3, [r0, #0]
 800408c:	2000      	movs	r0, #0
 800408e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004092:	4834      	ldr	r0, [pc, #208]	@ (8004164 <_strtol_l.constprop.0+0xf0>)
 8004094:	460d      	mov	r5, r1
 8004096:	462a      	mov	r2, r5
 8004098:	f815 4b01 	ldrb.w	r4, [r5], #1
 800409c:	5d06      	ldrb	r6, [r0, r4]
 800409e:	f016 0608 	ands.w	r6, r6, #8
 80040a2:	d1f8      	bne.n	8004096 <_strtol_l.constprop.0+0x22>
 80040a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80040a6:	d12d      	bne.n	8004104 <_strtol_l.constprop.0+0x90>
 80040a8:	782c      	ldrb	r4, [r5, #0]
 80040aa:	2601      	movs	r6, #1
 80040ac:	1c95      	adds	r5, r2, #2
 80040ae:	f033 0210 	bics.w	r2, r3, #16
 80040b2:	d109      	bne.n	80040c8 <_strtol_l.constprop.0+0x54>
 80040b4:	2c30      	cmp	r4, #48	@ 0x30
 80040b6:	d12a      	bne.n	800410e <_strtol_l.constprop.0+0x9a>
 80040b8:	782a      	ldrb	r2, [r5, #0]
 80040ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80040be:	2a58      	cmp	r2, #88	@ 0x58
 80040c0:	d125      	bne.n	800410e <_strtol_l.constprop.0+0x9a>
 80040c2:	786c      	ldrb	r4, [r5, #1]
 80040c4:	2310      	movs	r3, #16
 80040c6:	3502      	adds	r5, #2
 80040c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80040cc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80040d0:	2200      	movs	r2, #0
 80040d2:	fbbc f9f3 	udiv	r9, ip, r3
 80040d6:	4610      	mov	r0, r2
 80040d8:	fb03 ca19 	mls	sl, r3, r9, ip
 80040dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80040e0:	2f09      	cmp	r7, #9
 80040e2:	d81b      	bhi.n	800411c <_strtol_l.constprop.0+0xa8>
 80040e4:	463c      	mov	r4, r7
 80040e6:	42a3      	cmp	r3, r4
 80040e8:	dd27      	ble.n	800413a <_strtol_l.constprop.0+0xc6>
 80040ea:	1c57      	adds	r7, r2, #1
 80040ec:	d007      	beq.n	80040fe <_strtol_l.constprop.0+0x8a>
 80040ee:	4581      	cmp	r9, r0
 80040f0:	d320      	bcc.n	8004134 <_strtol_l.constprop.0+0xc0>
 80040f2:	d101      	bne.n	80040f8 <_strtol_l.constprop.0+0x84>
 80040f4:	45a2      	cmp	sl, r4
 80040f6:	db1d      	blt.n	8004134 <_strtol_l.constprop.0+0xc0>
 80040f8:	fb00 4003 	mla	r0, r0, r3, r4
 80040fc:	2201      	movs	r2, #1
 80040fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004102:	e7eb      	b.n	80040dc <_strtol_l.constprop.0+0x68>
 8004104:	2c2b      	cmp	r4, #43	@ 0x2b
 8004106:	bf04      	itt	eq
 8004108:	782c      	ldrbeq	r4, [r5, #0]
 800410a:	1c95      	addeq	r5, r2, #2
 800410c:	e7cf      	b.n	80040ae <_strtol_l.constprop.0+0x3a>
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1da      	bne.n	80040c8 <_strtol_l.constprop.0+0x54>
 8004112:	2c30      	cmp	r4, #48	@ 0x30
 8004114:	bf0c      	ite	eq
 8004116:	2308      	moveq	r3, #8
 8004118:	230a      	movne	r3, #10
 800411a:	e7d5      	b.n	80040c8 <_strtol_l.constprop.0+0x54>
 800411c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004120:	2f19      	cmp	r7, #25
 8004122:	d801      	bhi.n	8004128 <_strtol_l.constprop.0+0xb4>
 8004124:	3c37      	subs	r4, #55	@ 0x37
 8004126:	e7de      	b.n	80040e6 <_strtol_l.constprop.0+0x72>
 8004128:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800412c:	2f19      	cmp	r7, #25
 800412e:	d804      	bhi.n	800413a <_strtol_l.constprop.0+0xc6>
 8004130:	3c57      	subs	r4, #87	@ 0x57
 8004132:	e7d8      	b.n	80040e6 <_strtol_l.constprop.0+0x72>
 8004134:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004138:	e7e1      	b.n	80040fe <_strtol_l.constprop.0+0x8a>
 800413a:	1c53      	adds	r3, r2, #1
 800413c:	d108      	bne.n	8004150 <_strtol_l.constprop.0+0xdc>
 800413e:	2322      	movs	r3, #34	@ 0x22
 8004140:	f8ce 3000 	str.w	r3, [lr]
 8004144:	4660      	mov	r0, ip
 8004146:	f1b8 0f00 	cmp.w	r8, #0
 800414a:	d0a0      	beq.n	800408e <_strtol_l.constprop.0+0x1a>
 800414c:	1e69      	subs	r1, r5, #1
 800414e:	e006      	b.n	800415e <_strtol_l.constprop.0+0xea>
 8004150:	b106      	cbz	r6, 8004154 <_strtol_l.constprop.0+0xe0>
 8004152:	4240      	negs	r0, r0
 8004154:	f1b8 0f00 	cmp.w	r8, #0
 8004158:	d099      	beq.n	800408e <_strtol_l.constprop.0+0x1a>
 800415a:	2a00      	cmp	r2, #0
 800415c:	d1f6      	bne.n	800414c <_strtol_l.constprop.0+0xd8>
 800415e:	f8c8 1000 	str.w	r1, [r8]
 8004162:	e794      	b.n	800408e <_strtol_l.constprop.0+0x1a>
 8004164:	08004c95 	.word	0x08004c95

08004168 <strtol>:
 8004168:	4613      	mov	r3, r2
 800416a:	460a      	mov	r2, r1
 800416c:	4601      	mov	r1, r0
 800416e:	4802      	ldr	r0, [pc, #8]	@ (8004178 <strtol+0x10>)
 8004170:	6800      	ldr	r0, [r0, #0]
 8004172:	f7ff bf7f 	b.w	8004074 <_strtol_l.constprop.0>
 8004176:	bf00      	nop
 8004178:	2000000c 	.word	0x2000000c

0800417c <memset>:
 800417c:	4402      	add	r2, r0
 800417e:	4603      	mov	r3, r0
 8004180:	4293      	cmp	r3, r2
 8004182:	d100      	bne.n	8004186 <memset+0xa>
 8004184:	4770      	bx	lr
 8004186:	f803 1b01 	strb.w	r1, [r3], #1
 800418a:	e7f9      	b.n	8004180 <memset+0x4>

0800418c <__errno>:
 800418c:	4b01      	ldr	r3, [pc, #4]	@ (8004194 <__errno+0x8>)
 800418e:	6818      	ldr	r0, [r3, #0]
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	2000000c 	.word	0x2000000c

08004198 <__libc_init_array>:
 8004198:	b570      	push	{r4, r5, r6, lr}
 800419a:	4d0d      	ldr	r5, [pc, #52]	@ (80041d0 <__libc_init_array+0x38>)
 800419c:	4c0d      	ldr	r4, [pc, #52]	@ (80041d4 <__libc_init_array+0x3c>)
 800419e:	1b64      	subs	r4, r4, r5
 80041a0:	10a4      	asrs	r4, r4, #2
 80041a2:	2600      	movs	r6, #0
 80041a4:	42a6      	cmp	r6, r4
 80041a6:	d109      	bne.n	80041bc <__libc_init_array+0x24>
 80041a8:	4d0b      	ldr	r5, [pc, #44]	@ (80041d8 <__libc_init_array+0x40>)
 80041aa:	4c0c      	ldr	r4, [pc, #48]	@ (80041dc <__libc_init_array+0x44>)
 80041ac:	f000 fc66 	bl	8004a7c <_init>
 80041b0:	1b64      	subs	r4, r4, r5
 80041b2:	10a4      	asrs	r4, r4, #2
 80041b4:	2600      	movs	r6, #0
 80041b6:	42a6      	cmp	r6, r4
 80041b8:	d105      	bne.n	80041c6 <__libc_init_array+0x2e>
 80041ba:	bd70      	pop	{r4, r5, r6, pc}
 80041bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80041c0:	4798      	blx	r3
 80041c2:	3601      	adds	r6, #1
 80041c4:	e7ee      	b.n	80041a4 <__libc_init_array+0xc>
 80041c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ca:	4798      	blx	r3
 80041cc:	3601      	adds	r6, #1
 80041ce:	e7f2      	b.n	80041b6 <__libc_init_array+0x1e>
 80041d0:	08004dd0 	.word	0x08004dd0
 80041d4:	08004dd0 	.word	0x08004dd0
 80041d8:	08004dd0 	.word	0x08004dd0
 80041dc:	08004dd4 	.word	0x08004dd4

080041e0 <__retarget_lock_acquire_recursive>:
 80041e0:	4770      	bx	lr

080041e2 <__retarget_lock_release_recursive>:
 80041e2:	4770      	bx	lr

080041e4 <__ssputs_r>:
 80041e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041e8:	688e      	ldr	r6, [r1, #8]
 80041ea:	461f      	mov	r7, r3
 80041ec:	42be      	cmp	r6, r7
 80041ee:	680b      	ldr	r3, [r1, #0]
 80041f0:	4682      	mov	sl, r0
 80041f2:	460c      	mov	r4, r1
 80041f4:	4690      	mov	r8, r2
 80041f6:	d82d      	bhi.n	8004254 <__ssputs_r+0x70>
 80041f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80041fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004200:	d026      	beq.n	8004250 <__ssputs_r+0x6c>
 8004202:	6965      	ldr	r5, [r4, #20]
 8004204:	6909      	ldr	r1, [r1, #16]
 8004206:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800420a:	eba3 0901 	sub.w	r9, r3, r1
 800420e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004212:	1c7b      	adds	r3, r7, #1
 8004214:	444b      	add	r3, r9
 8004216:	106d      	asrs	r5, r5, #1
 8004218:	429d      	cmp	r5, r3
 800421a:	bf38      	it	cc
 800421c:	461d      	movcc	r5, r3
 800421e:	0553      	lsls	r3, r2, #21
 8004220:	d527      	bpl.n	8004272 <__ssputs_r+0x8e>
 8004222:	4629      	mov	r1, r5
 8004224:	f000 f958 	bl	80044d8 <_malloc_r>
 8004228:	4606      	mov	r6, r0
 800422a:	b360      	cbz	r0, 8004286 <__ssputs_r+0xa2>
 800422c:	6921      	ldr	r1, [r4, #16]
 800422e:	464a      	mov	r2, r9
 8004230:	f000 fbc4 	bl	80049bc <memcpy>
 8004234:	89a3      	ldrh	r3, [r4, #12]
 8004236:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800423a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800423e:	81a3      	strh	r3, [r4, #12]
 8004240:	6126      	str	r6, [r4, #16]
 8004242:	6165      	str	r5, [r4, #20]
 8004244:	444e      	add	r6, r9
 8004246:	eba5 0509 	sub.w	r5, r5, r9
 800424a:	6026      	str	r6, [r4, #0]
 800424c:	60a5      	str	r5, [r4, #8]
 800424e:	463e      	mov	r6, r7
 8004250:	42be      	cmp	r6, r7
 8004252:	d900      	bls.n	8004256 <__ssputs_r+0x72>
 8004254:	463e      	mov	r6, r7
 8004256:	6820      	ldr	r0, [r4, #0]
 8004258:	4632      	mov	r2, r6
 800425a:	4641      	mov	r1, r8
 800425c:	f000 fb84 	bl	8004968 <memmove>
 8004260:	68a3      	ldr	r3, [r4, #8]
 8004262:	1b9b      	subs	r3, r3, r6
 8004264:	60a3      	str	r3, [r4, #8]
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	4433      	add	r3, r6
 800426a:	6023      	str	r3, [r4, #0]
 800426c:	2000      	movs	r0, #0
 800426e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004272:	462a      	mov	r2, r5
 8004274:	f000 fb4a 	bl	800490c <_realloc_r>
 8004278:	4606      	mov	r6, r0
 800427a:	2800      	cmp	r0, #0
 800427c:	d1e0      	bne.n	8004240 <__ssputs_r+0x5c>
 800427e:	6921      	ldr	r1, [r4, #16]
 8004280:	4650      	mov	r0, sl
 8004282:	f000 fba9 	bl	80049d8 <_free_r>
 8004286:	230c      	movs	r3, #12
 8004288:	f8ca 3000 	str.w	r3, [sl]
 800428c:	89a3      	ldrh	r3, [r4, #12]
 800428e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004292:	81a3      	strh	r3, [r4, #12]
 8004294:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004298:	e7e9      	b.n	800426e <__ssputs_r+0x8a>
	...

0800429c <_svfiprintf_r>:
 800429c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042a0:	4698      	mov	r8, r3
 80042a2:	898b      	ldrh	r3, [r1, #12]
 80042a4:	061b      	lsls	r3, r3, #24
 80042a6:	b09d      	sub	sp, #116	@ 0x74
 80042a8:	4607      	mov	r7, r0
 80042aa:	460d      	mov	r5, r1
 80042ac:	4614      	mov	r4, r2
 80042ae:	d510      	bpl.n	80042d2 <_svfiprintf_r+0x36>
 80042b0:	690b      	ldr	r3, [r1, #16]
 80042b2:	b973      	cbnz	r3, 80042d2 <_svfiprintf_r+0x36>
 80042b4:	2140      	movs	r1, #64	@ 0x40
 80042b6:	f000 f90f 	bl	80044d8 <_malloc_r>
 80042ba:	6028      	str	r0, [r5, #0]
 80042bc:	6128      	str	r0, [r5, #16]
 80042be:	b930      	cbnz	r0, 80042ce <_svfiprintf_r+0x32>
 80042c0:	230c      	movs	r3, #12
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80042c8:	b01d      	add	sp, #116	@ 0x74
 80042ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ce:	2340      	movs	r3, #64	@ 0x40
 80042d0:	616b      	str	r3, [r5, #20]
 80042d2:	2300      	movs	r3, #0
 80042d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80042d6:	2320      	movs	r3, #32
 80042d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80042dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80042e0:	2330      	movs	r3, #48	@ 0x30
 80042e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004480 <_svfiprintf_r+0x1e4>
 80042e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80042ea:	f04f 0901 	mov.w	r9, #1
 80042ee:	4623      	mov	r3, r4
 80042f0:	469a      	mov	sl, r3
 80042f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042f6:	b10a      	cbz	r2, 80042fc <_svfiprintf_r+0x60>
 80042f8:	2a25      	cmp	r2, #37	@ 0x25
 80042fa:	d1f9      	bne.n	80042f0 <_svfiprintf_r+0x54>
 80042fc:	ebba 0b04 	subs.w	fp, sl, r4
 8004300:	d00b      	beq.n	800431a <_svfiprintf_r+0x7e>
 8004302:	465b      	mov	r3, fp
 8004304:	4622      	mov	r2, r4
 8004306:	4629      	mov	r1, r5
 8004308:	4638      	mov	r0, r7
 800430a:	f7ff ff6b 	bl	80041e4 <__ssputs_r>
 800430e:	3001      	adds	r0, #1
 8004310:	f000 80a7 	beq.w	8004462 <_svfiprintf_r+0x1c6>
 8004314:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004316:	445a      	add	r2, fp
 8004318:	9209      	str	r2, [sp, #36]	@ 0x24
 800431a:	f89a 3000 	ldrb.w	r3, [sl]
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 809f 	beq.w	8004462 <_svfiprintf_r+0x1c6>
 8004324:	2300      	movs	r3, #0
 8004326:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800432a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800432e:	f10a 0a01 	add.w	sl, sl, #1
 8004332:	9304      	str	r3, [sp, #16]
 8004334:	9307      	str	r3, [sp, #28]
 8004336:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800433a:	931a      	str	r3, [sp, #104]	@ 0x68
 800433c:	4654      	mov	r4, sl
 800433e:	2205      	movs	r2, #5
 8004340:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004344:	484e      	ldr	r0, [pc, #312]	@ (8004480 <_svfiprintf_r+0x1e4>)
 8004346:	f7fb ff53 	bl	80001f0 <memchr>
 800434a:	9a04      	ldr	r2, [sp, #16]
 800434c:	b9d8      	cbnz	r0, 8004386 <_svfiprintf_r+0xea>
 800434e:	06d0      	lsls	r0, r2, #27
 8004350:	bf44      	itt	mi
 8004352:	2320      	movmi	r3, #32
 8004354:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004358:	0711      	lsls	r1, r2, #28
 800435a:	bf44      	itt	mi
 800435c:	232b      	movmi	r3, #43	@ 0x2b
 800435e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004362:	f89a 3000 	ldrb.w	r3, [sl]
 8004366:	2b2a      	cmp	r3, #42	@ 0x2a
 8004368:	d015      	beq.n	8004396 <_svfiprintf_r+0xfa>
 800436a:	9a07      	ldr	r2, [sp, #28]
 800436c:	4654      	mov	r4, sl
 800436e:	2000      	movs	r0, #0
 8004370:	f04f 0c0a 	mov.w	ip, #10
 8004374:	4621      	mov	r1, r4
 8004376:	f811 3b01 	ldrb.w	r3, [r1], #1
 800437a:	3b30      	subs	r3, #48	@ 0x30
 800437c:	2b09      	cmp	r3, #9
 800437e:	d94b      	bls.n	8004418 <_svfiprintf_r+0x17c>
 8004380:	b1b0      	cbz	r0, 80043b0 <_svfiprintf_r+0x114>
 8004382:	9207      	str	r2, [sp, #28]
 8004384:	e014      	b.n	80043b0 <_svfiprintf_r+0x114>
 8004386:	eba0 0308 	sub.w	r3, r0, r8
 800438a:	fa09 f303 	lsl.w	r3, r9, r3
 800438e:	4313      	orrs	r3, r2
 8004390:	9304      	str	r3, [sp, #16]
 8004392:	46a2      	mov	sl, r4
 8004394:	e7d2      	b.n	800433c <_svfiprintf_r+0xa0>
 8004396:	9b03      	ldr	r3, [sp, #12]
 8004398:	1d19      	adds	r1, r3, #4
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	9103      	str	r1, [sp, #12]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	bfbb      	ittet	lt
 80043a2:	425b      	neglt	r3, r3
 80043a4:	f042 0202 	orrlt.w	r2, r2, #2
 80043a8:	9307      	strge	r3, [sp, #28]
 80043aa:	9307      	strlt	r3, [sp, #28]
 80043ac:	bfb8      	it	lt
 80043ae:	9204      	strlt	r2, [sp, #16]
 80043b0:	7823      	ldrb	r3, [r4, #0]
 80043b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80043b4:	d10a      	bne.n	80043cc <_svfiprintf_r+0x130>
 80043b6:	7863      	ldrb	r3, [r4, #1]
 80043b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80043ba:	d132      	bne.n	8004422 <_svfiprintf_r+0x186>
 80043bc:	9b03      	ldr	r3, [sp, #12]
 80043be:	1d1a      	adds	r2, r3, #4
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	9203      	str	r2, [sp, #12]
 80043c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80043c8:	3402      	adds	r4, #2
 80043ca:	9305      	str	r3, [sp, #20]
 80043cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004490 <_svfiprintf_r+0x1f4>
 80043d0:	7821      	ldrb	r1, [r4, #0]
 80043d2:	2203      	movs	r2, #3
 80043d4:	4650      	mov	r0, sl
 80043d6:	f7fb ff0b 	bl	80001f0 <memchr>
 80043da:	b138      	cbz	r0, 80043ec <_svfiprintf_r+0x150>
 80043dc:	9b04      	ldr	r3, [sp, #16]
 80043de:	eba0 000a 	sub.w	r0, r0, sl
 80043e2:	2240      	movs	r2, #64	@ 0x40
 80043e4:	4082      	lsls	r2, r0
 80043e6:	4313      	orrs	r3, r2
 80043e8:	3401      	adds	r4, #1
 80043ea:	9304      	str	r3, [sp, #16]
 80043ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043f0:	4824      	ldr	r0, [pc, #144]	@ (8004484 <_svfiprintf_r+0x1e8>)
 80043f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80043f6:	2206      	movs	r2, #6
 80043f8:	f7fb fefa 	bl	80001f0 <memchr>
 80043fc:	2800      	cmp	r0, #0
 80043fe:	d036      	beq.n	800446e <_svfiprintf_r+0x1d2>
 8004400:	4b21      	ldr	r3, [pc, #132]	@ (8004488 <_svfiprintf_r+0x1ec>)
 8004402:	bb1b      	cbnz	r3, 800444c <_svfiprintf_r+0x1b0>
 8004404:	9b03      	ldr	r3, [sp, #12]
 8004406:	3307      	adds	r3, #7
 8004408:	f023 0307 	bic.w	r3, r3, #7
 800440c:	3308      	adds	r3, #8
 800440e:	9303      	str	r3, [sp, #12]
 8004410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004412:	4433      	add	r3, r6
 8004414:	9309      	str	r3, [sp, #36]	@ 0x24
 8004416:	e76a      	b.n	80042ee <_svfiprintf_r+0x52>
 8004418:	fb0c 3202 	mla	r2, ip, r2, r3
 800441c:	460c      	mov	r4, r1
 800441e:	2001      	movs	r0, #1
 8004420:	e7a8      	b.n	8004374 <_svfiprintf_r+0xd8>
 8004422:	2300      	movs	r3, #0
 8004424:	3401      	adds	r4, #1
 8004426:	9305      	str	r3, [sp, #20]
 8004428:	4619      	mov	r1, r3
 800442a:	f04f 0c0a 	mov.w	ip, #10
 800442e:	4620      	mov	r0, r4
 8004430:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004434:	3a30      	subs	r2, #48	@ 0x30
 8004436:	2a09      	cmp	r2, #9
 8004438:	d903      	bls.n	8004442 <_svfiprintf_r+0x1a6>
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0c6      	beq.n	80043cc <_svfiprintf_r+0x130>
 800443e:	9105      	str	r1, [sp, #20]
 8004440:	e7c4      	b.n	80043cc <_svfiprintf_r+0x130>
 8004442:	fb0c 2101 	mla	r1, ip, r1, r2
 8004446:	4604      	mov	r4, r0
 8004448:	2301      	movs	r3, #1
 800444a:	e7f0      	b.n	800442e <_svfiprintf_r+0x192>
 800444c:	ab03      	add	r3, sp, #12
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	462a      	mov	r2, r5
 8004452:	4b0e      	ldr	r3, [pc, #56]	@ (800448c <_svfiprintf_r+0x1f0>)
 8004454:	a904      	add	r1, sp, #16
 8004456:	4638      	mov	r0, r7
 8004458:	f3af 8000 	nop.w
 800445c:	1c42      	adds	r2, r0, #1
 800445e:	4606      	mov	r6, r0
 8004460:	d1d6      	bne.n	8004410 <_svfiprintf_r+0x174>
 8004462:	89ab      	ldrh	r3, [r5, #12]
 8004464:	065b      	lsls	r3, r3, #25
 8004466:	f53f af2d 	bmi.w	80042c4 <_svfiprintf_r+0x28>
 800446a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800446c:	e72c      	b.n	80042c8 <_svfiprintf_r+0x2c>
 800446e:	ab03      	add	r3, sp, #12
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	462a      	mov	r2, r5
 8004474:	4b05      	ldr	r3, [pc, #20]	@ (800448c <_svfiprintf_r+0x1f0>)
 8004476:	a904      	add	r1, sp, #16
 8004478:	4638      	mov	r0, r7
 800447a:	f000 f91b 	bl	80046b4 <_printf_i>
 800447e:	e7ed      	b.n	800445c <_svfiprintf_r+0x1c0>
 8004480:	08004d95 	.word	0x08004d95
 8004484:	08004d9f 	.word	0x08004d9f
 8004488:	00000000 	.word	0x00000000
 800448c:	080041e5 	.word	0x080041e5
 8004490:	08004d9b 	.word	0x08004d9b

08004494 <sbrk_aligned>:
 8004494:	b570      	push	{r4, r5, r6, lr}
 8004496:	4e0f      	ldr	r6, [pc, #60]	@ (80044d4 <sbrk_aligned+0x40>)
 8004498:	460c      	mov	r4, r1
 800449a:	6831      	ldr	r1, [r6, #0]
 800449c:	4605      	mov	r5, r0
 800449e:	b911      	cbnz	r1, 80044a6 <sbrk_aligned+0x12>
 80044a0:	f000 fa7c 	bl	800499c <_sbrk_r>
 80044a4:	6030      	str	r0, [r6, #0]
 80044a6:	4621      	mov	r1, r4
 80044a8:	4628      	mov	r0, r5
 80044aa:	f000 fa77 	bl	800499c <_sbrk_r>
 80044ae:	1c43      	adds	r3, r0, #1
 80044b0:	d103      	bne.n	80044ba <sbrk_aligned+0x26>
 80044b2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80044b6:	4620      	mov	r0, r4
 80044b8:	bd70      	pop	{r4, r5, r6, pc}
 80044ba:	1cc4      	adds	r4, r0, #3
 80044bc:	f024 0403 	bic.w	r4, r4, #3
 80044c0:	42a0      	cmp	r0, r4
 80044c2:	d0f8      	beq.n	80044b6 <sbrk_aligned+0x22>
 80044c4:	1a21      	subs	r1, r4, r0
 80044c6:	4628      	mov	r0, r5
 80044c8:	f000 fa68 	bl	800499c <_sbrk_r>
 80044cc:	3001      	adds	r0, #1
 80044ce:	d1f2      	bne.n	80044b6 <sbrk_aligned+0x22>
 80044d0:	e7ef      	b.n	80044b2 <sbrk_aligned+0x1e>
 80044d2:	bf00      	nop
 80044d4:	200002a8 	.word	0x200002a8

080044d8 <_malloc_r>:
 80044d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044dc:	1ccd      	adds	r5, r1, #3
 80044de:	f025 0503 	bic.w	r5, r5, #3
 80044e2:	3508      	adds	r5, #8
 80044e4:	2d0c      	cmp	r5, #12
 80044e6:	bf38      	it	cc
 80044e8:	250c      	movcc	r5, #12
 80044ea:	2d00      	cmp	r5, #0
 80044ec:	4606      	mov	r6, r0
 80044ee:	db01      	blt.n	80044f4 <_malloc_r+0x1c>
 80044f0:	42a9      	cmp	r1, r5
 80044f2:	d904      	bls.n	80044fe <_malloc_r+0x26>
 80044f4:	230c      	movs	r3, #12
 80044f6:	6033      	str	r3, [r6, #0]
 80044f8:	2000      	movs	r0, #0
 80044fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80045d4 <_malloc_r+0xfc>
 8004502:	f000 f9f7 	bl	80048f4 <__malloc_lock>
 8004506:	f8d8 3000 	ldr.w	r3, [r8]
 800450a:	461c      	mov	r4, r3
 800450c:	bb44      	cbnz	r4, 8004560 <_malloc_r+0x88>
 800450e:	4629      	mov	r1, r5
 8004510:	4630      	mov	r0, r6
 8004512:	f7ff ffbf 	bl	8004494 <sbrk_aligned>
 8004516:	1c43      	adds	r3, r0, #1
 8004518:	4604      	mov	r4, r0
 800451a:	d158      	bne.n	80045ce <_malloc_r+0xf6>
 800451c:	f8d8 4000 	ldr.w	r4, [r8]
 8004520:	4627      	mov	r7, r4
 8004522:	2f00      	cmp	r7, #0
 8004524:	d143      	bne.n	80045ae <_malloc_r+0xd6>
 8004526:	2c00      	cmp	r4, #0
 8004528:	d04b      	beq.n	80045c2 <_malloc_r+0xea>
 800452a:	6823      	ldr	r3, [r4, #0]
 800452c:	4639      	mov	r1, r7
 800452e:	4630      	mov	r0, r6
 8004530:	eb04 0903 	add.w	r9, r4, r3
 8004534:	f000 fa32 	bl	800499c <_sbrk_r>
 8004538:	4581      	cmp	r9, r0
 800453a:	d142      	bne.n	80045c2 <_malloc_r+0xea>
 800453c:	6821      	ldr	r1, [r4, #0]
 800453e:	1a6d      	subs	r5, r5, r1
 8004540:	4629      	mov	r1, r5
 8004542:	4630      	mov	r0, r6
 8004544:	f7ff ffa6 	bl	8004494 <sbrk_aligned>
 8004548:	3001      	adds	r0, #1
 800454a:	d03a      	beq.n	80045c2 <_malloc_r+0xea>
 800454c:	6823      	ldr	r3, [r4, #0]
 800454e:	442b      	add	r3, r5
 8004550:	6023      	str	r3, [r4, #0]
 8004552:	f8d8 3000 	ldr.w	r3, [r8]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	bb62      	cbnz	r2, 80045b4 <_malloc_r+0xdc>
 800455a:	f8c8 7000 	str.w	r7, [r8]
 800455e:	e00f      	b.n	8004580 <_malloc_r+0xa8>
 8004560:	6822      	ldr	r2, [r4, #0]
 8004562:	1b52      	subs	r2, r2, r5
 8004564:	d420      	bmi.n	80045a8 <_malloc_r+0xd0>
 8004566:	2a0b      	cmp	r2, #11
 8004568:	d917      	bls.n	800459a <_malloc_r+0xc2>
 800456a:	1961      	adds	r1, r4, r5
 800456c:	42a3      	cmp	r3, r4
 800456e:	6025      	str	r5, [r4, #0]
 8004570:	bf18      	it	ne
 8004572:	6059      	strne	r1, [r3, #4]
 8004574:	6863      	ldr	r3, [r4, #4]
 8004576:	bf08      	it	eq
 8004578:	f8c8 1000 	streq.w	r1, [r8]
 800457c:	5162      	str	r2, [r4, r5]
 800457e:	604b      	str	r3, [r1, #4]
 8004580:	4630      	mov	r0, r6
 8004582:	f000 f9bd 	bl	8004900 <__malloc_unlock>
 8004586:	f104 000b 	add.w	r0, r4, #11
 800458a:	1d23      	adds	r3, r4, #4
 800458c:	f020 0007 	bic.w	r0, r0, #7
 8004590:	1ac2      	subs	r2, r0, r3
 8004592:	bf1c      	itt	ne
 8004594:	1a1b      	subne	r3, r3, r0
 8004596:	50a3      	strne	r3, [r4, r2]
 8004598:	e7af      	b.n	80044fa <_malloc_r+0x22>
 800459a:	6862      	ldr	r2, [r4, #4]
 800459c:	42a3      	cmp	r3, r4
 800459e:	bf0c      	ite	eq
 80045a0:	f8c8 2000 	streq.w	r2, [r8]
 80045a4:	605a      	strne	r2, [r3, #4]
 80045a6:	e7eb      	b.n	8004580 <_malloc_r+0xa8>
 80045a8:	4623      	mov	r3, r4
 80045aa:	6864      	ldr	r4, [r4, #4]
 80045ac:	e7ae      	b.n	800450c <_malloc_r+0x34>
 80045ae:	463c      	mov	r4, r7
 80045b0:	687f      	ldr	r7, [r7, #4]
 80045b2:	e7b6      	b.n	8004522 <_malloc_r+0x4a>
 80045b4:	461a      	mov	r2, r3
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	42a3      	cmp	r3, r4
 80045ba:	d1fb      	bne.n	80045b4 <_malloc_r+0xdc>
 80045bc:	2300      	movs	r3, #0
 80045be:	6053      	str	r3, [r2, #4]
 80045c0:	e7de      	b.n	8004580 <_malloc_r+0xa8>
 80045c2:	230c      	movs	r3, #12
 80045c4:	6033      	str	r3, [r6, #0]
 80045c6:	4630      	mov	r0, r6
 80045c8:	f000 f99a 	bl	8004900 <__malloc_unlock>
 80045cc:	e794      	b.n	80044f8 <_malloc_r+0x20>
 80045ce:	6005      	str	r5, [r0, #0]
 80045d0:	e7d6      	b.n	8004580 <_malloc_r+0xa8>
 80045d2:	bf00      	nop
 80045d4:	200002ac 	.word	0x200002ac

080045d8 <_printf_common>:
 80045d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045dc:	4616      	mov	r6, r2
 80045de:	4698      	mov	r8, r3
 80045e0:	688a      	ldr	r2, [r1, #8]
 80045e2:	690b      	ldr	r3, [r1, #16]
 80045e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80045e8:	4293      	cmp	r3, r2
 80045ea:	bfb8      	it	lt
 80045ec:	4613      	movlt	r3, r2
 80045ee:	6033      	str	r3, [r6, #0]
 80045f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80045f4:	4607      	mov	r7, r0
 80045f6:	460c      	mov	r4, r1
 80045f8:	b10a      	cbz	r2, 80045fe <_printf_common+0x26>
 80045fa:	3301      	adds	r3, #1
 80045fc:	6033      	str	r3, [r6, #0]
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	0699      	lsls	r1, r3, #26
 8004602:	bf42      	ittt	mi
 8004604:	6833      	ldrmi	r3, [r6, #0]
 8004606:	3302      	addmi	r3, #2
 8004608:	6033      	strmi	r3, [r6, #0]
 800460a:	6825      	ldr	r5, [r4, #0]
 800460c:	f015 0506 	ands.w	r5, r5, #6
 8004610:	d106      	bne.n	8004620 <_printf_common+0x48>
 8004612:	f104 0a19 	add.w	sl, r4, #25
 8004616:	68e3      	ldr	r3, [r4, #12]
 8004618:	6832      	ldr	r2, [r6, #0]
 800461a:	1a9b      	subs	r3, r3, r2
 800461c:	42ab      	cmp	r3, r5
 800461e:	dc26      	bgt.n	800466e <_printf_common+0x96>
 8004620:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004624:	6822      	ldr	r2, [r4, #0]
 8004626:	3b00      	subs	r3, #0
 8004628:	bf18      	it	ne
 800462a:	2301      	movne	r3, #1
 800462c:	0692      	lsls	r2, r2, #26
 800462e:	d42b      	bmi.n	8004688 <_printf_common+0xb0>
 8004630:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004634:	4641      	mov	r1, r8
 8004636:	4638      	mov	r0, r7
 8004638:	47c8      	blx	r9
 800463a:	3001      	adds	r0, #1
 800463c:	d01e      	beq.n	800467c <_printf_common+0xa4>
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	6922      	ldr	r2, [r4, #16]
 8004642:	f003 0306 	and.w	r3, r3, #6
 8004646:	2b04      	cmp	r3, #4
 8004648:	bf02      	ittt	eq
 800464a:	68e5      	ldreq	r5, [r4, #12]
 800464c:	6833      	ldreq	r3, [r6, #0]
 800464e:	1aed      	subeq	r5, r5, r3
 8004650:	68a3      	ldr	r3, [r4, #8]
 8004652:	bf0c      	ite	eq
 8004654:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004658:	2500      	movne	r5, #0
 800465a:	4293      	cmp	r3, r2
 800465c:	bfc4      	itt	gt
 800465e:	1a9b      	subgt	r3, r3, r2
 8004660:	18ed      	addgt	r5, r5, r3
 8004662:	2600      	movs	r6, #0
 8004664:	341a      	adds	r4, #26
 8004666:	42b5      	cmp	r5, r6
 8004668:	d11a      	bne.n	80046a0 <_printf_common+0xc8>
 800466a:	2000      	movs	r0, #0
 800466c:	e008      	b.n	8004680 <_printf_common+0xa8>
 800466e:	2301      	movs	r3, #1
 8004670:	4652      	mov	r2, sl
 8004672:	4641      	mov	r1, r8
 8004674:	4638      	mov	r0, r7
 8004676:	47c8      	blx	r9
 8004678:	3001      	adds	r0, #1
 800467a:	d103      	bne.n	8004684 <_printf_common+0xac>
 800467c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004684:	3501      	adds	r5, #1
 8004686:	e7c6      	b.n	8004616 <_printf_common+0x3e>
 8004688:	18e1      	adds	r1, r4, r3
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	2030      	movs	r0, #48	@ 0x30
 800468e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004692:	4422      	add	r2, r4
 8004694:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004698:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800469c:	3302      	adds	r3, #2
 800469e:	e7c7      	b.n	8004630 <_printf_common+0x58>
 80046a0:	2301      	movs	r3, #1
 80046a2:	4622      	mov	r2, r4
 80046a4:	4641      	mov	r1, r8
 80046a6:	4638      	mov	r0, r7
 80046a8:	47c8      	blx	r9
 80046aa:	3001      	adds	r0, #1
 80046ac:	d0e6      	beq.n	800467c <_printf_common+0xa4>
 80046ae:	3601      	adds	r6, #1
 80046b0:	e7d9      	b.n	8004666 <_printf_common+0x8e>
	...

080046b4 <_printf_i>:
 80046b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046b8:	7e0f      	ldrb	r7, [r1, #24]
 80046ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046bc:	2f78      	cmp	r7, #120	@ 0x78
 80046be:	4691      	mov	r9, r2
 80046c0:	4680      	mov	r8, r0
 80046c2:	460c      	mov	r4, r1
 80046c4:	469a      	mov	sl, r3
 80046c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80046ca:	d807      	bhi.n	80046dc <_printf_i+0x28>
 80046cc:	2f62      	cmp	r7, #98	@ 0x62
 80046ce:	d80a      	bhi.n	80046e6 <_printf_i+0x32>
 80046d0:	2f00      	cmp	r7, #0
 80046d2:	f000 80d2 	beq.w	800487a <_printf_i+0x1c6>
 80046d6:	2f58      	cmp	r7, #88	@ 0x58
 80046d8:	f000 80b9 	beq.w	800484e <_printf_i+0x19a>
 80046dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80046e4:	e03a      	b.n	800475c <_printf_i+0xa8>
 80046e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80046ea:	2b15      	cmp	r3, #21
 80046ec:	d8f6      	bhi.n	80046dc <_printf_i+0x28>
 80046ee:	a101      	add	r1, pc, #4	@ (adr r1, 80046f4 <_printf_i+0x40>)
 80046f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046f4:	0800474d 	.word	0x0800474d
 80046f8:	08004761 	.word	0x08004761
 80046fc:	080046dd 	.word	0x080046dd
 8004700:	080046dd 	.word	0x080046dd
 8004704:	080046dd 	.word	0x080046dd
 8004708:	080046dd 	.word	0x080046dd
 800470c:	08004761 	.word	0x08004761
 8004710:	080046dd 	.word	0x080046dd
 8004714:	080046dd 	.word	0x080046dd
 8004718:	080046dd 	.word	0x080046dd
 800471c:	080046dd 	.word	0x080046dd
 8004720:	08004861 	.word	0x08004861
 8004724:	0800478b 	.word	0x0800478b
 8004728:	0800481b 	.word	0x0800481b
 800472c:	080046dd 	.word	0x080046dd
 8004730:	080046dd 	.word	0x080046dd
 8004734:	08004883 	.word	0x08004883
 8004738:	080046dd 	.word	0x080046dd
 800473c:	0800478b 	.word	0x0800478b
 8004740:	080046dd 	.word	0x080046dd
 8004744:	080046dd 	.word	0x080046dd
 8004748:	08004823 	.word	0x08004823
 800474c:	6833      	ldr	r3, [r6, #0]
 800474e:	1d1a      	adds	r2, r3, #4
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6032      	str	r2, [r6, #0]
 8004754:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004758:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800475c:	2301      	movs	r3, #1
 800475e:	e09d      	b.n	800489c <_printf_i+0x1e8>
 8004760:	6833      	ldr	r3, [r6, #0]
 8004762:	6820      	ldr	r0, [r4, #0]
 8004764:	1d19      	adds	r1, r3, #4
 8004766:	6031      	str	r1, [r6, #0]
 8004768:	0606      	lsls	r6, r0, #24
 800476a:	d501      	bpl.n	8004770 <_printf_i+0xbc>
 800476c:	681d      	ldr	r5, [r3, #0]
 800476e:	e003      	b.n	8004778 <_printf_i+0xc4>
 8004770:	0645      	lsls	r5, r0, #25
 8004772:	d5fb      	bpl.n	800476c <_printf_i+0xb8>
 8004774:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004778:	2d00      	cmp	r5, #0
 800477a:	da03      	bge.n	8004784 <_printf_i+0xd0>
 800477c:	232d      	movs	r3, #45	@ 0x2d
 800477e:	426d      	negs	r5, r5
 8004780:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004784:	4859      	ldr	r0, [pc, #356]	@ (80048ec <_printf_i+0x238>)
 8004786:	230a      	movs	r3, #10
 8004788:	e011      	b.n	80047ae <_printf_i+0xfa>
 800478a:	6821      	ldr	r1, [r4, #0]
 800478c:	6833      	ldr	r3, [r6, #0]
 800478e:	0608      	lsls	r0, r1, #24
 8004790:	f853 5b04 	ldr.w	r5, [r3], #4
 8004794:	d402      	bmi.n	800479c <_printf_i+0xe8>
 8004796:	0649      	lsls	r1, r1, #25
 8004798:	bf48      	it	mi
 800479a:	b2ad      	uxthmi	r5, r5
 800479c:	2f6f      	cmp	r7, #111	@ 0x6f
 800479e:	4853      	ldr	r0, [pc, #332]	@ (80048ec <_printf_i+0x238>)
 80047a0:	6033      	str	r3, [r6, #0]
 80047a2:	bf14      	ite	ne
 80047a4:	230a      	movne	r3, #10
 80047a6:	2308      	moveq	r3, #8
 80047a8:	2100      	movs	r1, #0
 80047aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80047ae:	6866      	ldr	r6, [r4, #4]
 80047b0:	60a6      	str	r6, [r4, #8]
 80047b2:	2e00      	cmp	r6, #0
 80047b4:	bfa2      	ittt	ge
 80047b6:	6821      	ldrge	r1, [r4, #0]
 80047b8:	f021 0104 	bicge.w	r1, r1, #4
 80047bc:	6021      	strge	r1, [r4, #0]
 80047be:	b90d      	cbnz	r5, 80047c4 <_printf_i+0x110>
 80047c0:	2e00      	cmp	r6, #0
 80047c2:	d04b      	beq.n	800485c <_printf_i+0x1a8>
 80047c4:	4616      	mov	r6, r2
 80047c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80047ca:	fb03 5711 	mls	r7, r3, r1, r5
 80047ce:	5dc7      	ldrb	r7, [r0, r7]
 80047d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047d4:	462f      	mov	r7, r5
 80047d6:	42bb      	cmp	r3, r7
 80047d8:	460d      	mov	r5, r1
 80047da:	d9f4      	bls.n	80047c6 <_printf_i+0x112>
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d10b      	bne.n	80047f8 <_printf_i+0x144>
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	07df      	lsls	r7, r3, #31
 80047e4:	d508      	bpl.n	80047f8 <_printf_i+0x144>
 80047e6:	6923      	ldr	r3, [r4, #16]
 80047e8:	6861      	ldr	r1, [r4, #4]
 80047ea:	4299      	cmp	r1, r3
 80047ec:	bfde      	ittt	le
 80047ee:	2330      	movle	r3, #48	@ 0x30
 80047f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047f4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80047f8:	1b92      	subs	r2, r2, r6
 80047fa:	6122      	str	r2, [r4, #16]
 80047fc:	f8cd a000 	str.w	sl, [sp]
 8004800:	464b      	mov	r3, r9
 8004802:	aa03      	add	r2, sp, #12
 8004804:	4621      	mov	r1, r4
 8004806:	4640      	mov	r0, r8
 8004808:	f7ff fee6 	bl	80045d8 <_printf_common>
 800480c:	3001      	adds	r0, #1
 800480e:	d14a      	bne.n	80048a6 <_printf_i+0x1f2>
 8004810:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004814:	b004      	add	sp, #16
 8004816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	f043 0320 	orr.w	r3, r3, #32
 8004820:	6023      	str	r3, [r4, #0]
 8004822:	4833      	ldr	r0, [pc, #204]	@ (80048f0 <_printf_i+0x23c>)
 8004824:	2778      	movs	r7, #120	@ 0x78
 8004826:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	6831      	ldr	r1, [r6, #0]
 800482e:	061f      	lsls	r7, r3, #24
 8004830:	f851 5b04 	ldr.w	r5, [r1], #4
 8004834:	d402      	bmi.n	800483c <_printf_i+0x188>
 8004836:	065f      	lsls	r7, r3, #25
 8004838:	bf48      	it	mi
 800483a:	b2ad      	uxthmi	r5, r5
 800483c:	6031      	str	r1, [r6, #0]
 800483e:	07d9      	lsls	r1, r3, #31
 8004840:	bf44      	itt	mi
 8004842:	f043 0320 	orrmi.w	r3, r3, #32
 8004846:	6023      	strmi	r3, [r4, #0]
 8004848:	b11d      	cbz	r5, 8004852 <_printf_i+0x19e>
 800484a:	2310      	movs	r3, #16
 800484c:	e7ac      	b.n	80047a8 <_printf_i+0xf4>
 800484e:	4827      	ldr	r0, [pc, #156]	@ (80048ec <_printf_i+0x238>)
 8004850:	e7e9      	b.n	8004826 <_printf_i+0x172>
 8004852:	6823      	ldr	r3, [r4, #0]
 8004854:	f023 0320 	bic.w	r3, r3, #32
 8004858:	6023      	str	r3, [r4, #0]
 800485a:	e7f6      	b.n	800484a <_printf_i+0x196>
 800485c:	4616      	mov	r6, r2
 800485e:	e7bd      	b.n	80047dc <_printf_i+0x128>
 8004860:	6833      	ldr	r3, [r6, #0]
 8004862:	6825      	ldr	r5, [r4, #0]
 8004864:	6961      	ldr	r1, [r4, #20]
 8004866:	1d18      	adds	r0, r3, #4
 8004868:	6030      	str	r0, [r6, #0]
 800486a:	062e      	lsls	r6, r5, #24
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	d501      	bpl.n	8004874 <_printf_i+0x1c0>
 8004870:	6019      	str	r1, [r3, #0]
 8004872:	e002      	b.n	800487a <_printf_i+0x1c6>
 8004874:	0668      	lsls	r0, r5, #25
 8004876:	d5fb      	bpl.n	8004870 <_printf_i+0x1bc>
 8004878:	8019      	strh	r1, [r3, #0]
 800487a:	2300      	movs	r3, #0
 800487c:	6123      	str	r3, [r4, #16]
 800487e:	4616      	mov	r6, r2
 8004880:	e7bc      	b.n	80047fc <_printf_i+0x148>
 8004882:	6833      	ldr	r3, [r6, #0]
 8004884:	1d1a      	adds	r2, r3, #4
 8004886:	6032      	str	r2, [r6, #0]
 8004888:	681e      	ldr	r6, [r3, #0]
 800488a:	6862      	ldr	r2, [r4, #4]
 800488c:	2100      	movs	r1, #0
 800488e:	4630      	mov	r0, r6
 8004890:	f7fb fcae 	bl	80001f0 <memchr>
 8004894:	b108      	cbz	r0, 800489a <_printf_i+0x1e6>
 8004896:	1b80      	subs	r0, r0, r6
 8004898:	6060      	str	r0, [r4, #4]
 800489a:	6863      	ldr	r3, [r4, #4]
 800489c:	6123      	str	r3, [r4, #16]
 800489e:	2300      	movs	r3, #0
 80048a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048a4:	e7aa      	b.n	80047fc <_printf_i+0x148>
 80048a6:	6923      	ldr	r3, [r4, #16]
 80048a8:	4632      	mov	r2, r6
 80048aa:	4649      	mov	r1, r9
 80048ac:	4640      	mov	r0, r8
 80048ae:	47d0      	blx	sl
 80048b0:	3001      	adds	r0, #1
 80048b2:	d0ad      	beq.n	8004810 <_printf_i+0x15c>
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	079b      	lsls	r3, r3, #30
 80048b8:	d413      	bmi.n	80048e2 <_printf_i+0x22e>
 80048ba:	68e0      	ldr	r0, [r4, #12]
 80048bc:	9b03      	ldr	r3, [sp, #12]
 80048be:	4298      	cmp	r0, r3
 80048c0:	bfb8      	it	lt
 80048c2:	4618      	movlt	r0, r3
 80048c4:	e7a6      	b.n	8004814 <_printf_i+0x160>
 80048c6:	2301      	movs	r3, #1
 80048c8:	4632      	mov	r2, r6
 80048ca:	4649      	mov	r1, r9
 80048cc:	4640      	mov	r0, r8
 80048ce:	47d0      	blx	sl
 80048d0:	3001      	adds	r0, #1
 80048d2:	d09d      	beq.n	8004810 <_printf_i+0x15c>
 80048d4:	3501      	adds	r5, #1
 80048d6:	68e3      	ldr	r3, [r4, #12]
 80048d8:	9903      	ldr	r1, [sp, #12]
 80048da:	1a5b      	subs	r3, r3, r1
 80048dc:	42ab      	cmp	r3, r5
 80048de:	dcf2      	bgt.n	80048c6 <_printf_i+0x212>
 80048e0:	e7eb      	b.n	80048ba <_printf_i+0x206>
 80048e2:	2500      	movs	r5, #0
 80048e4:	f104 0619 	add.w	r6, r4, #25
 80048e8:	e7f5      	b.n	80048d6 <_printf_i+0x222>
 80048ea:	bf00      	nop
 80048ec:	08004da6 	.word	0x08004da6
 80048f0:	08004db7 	.word	0x08004db7

080048f4 <__malloc_lock>:
 80048f4:	4801      	ldr	r0, [pc, #4]	@ (80048fc <__malloc_lock+0x8>)
 80048f6:	f7ff bc73 	b.w	80041e0 <__retarget_lock_acquire_recursive>
 80048fa:	bf00      	nop
 80048fc:	200002a4 	.word	0x200002a4

08004900 <__malloc_unlock>:
 8004900:	4801      	ldr	r0, [pc, #4]	@ (8004908 <__malloc_unlock+0x8>)
 8004902:	f7ff bc6e 	b.w	80041e2 <__retarget_lock_release_recursive>
 8004906:	bf00      	nop
 8004908:	200002a4 	.word	0x200002a4

0800490c <_realloc_r>:
 800490c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004910:	4680      	mov	r8, r0
 8004912:	4615      	mov	r5, r2
 8004914:	460c      	mov	r4, r1
 8004916:	b921      	cbnz	r1, 8004922 <_realloc_r+0x16>
 8004918:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800491c:	4611      	mov	r1, r2
 800491e:	f7ff bddb 	b.w	80044d8 <_malloc_r>
 8004922:	b92a      	cbnz	r2, 8004930 <_realloc_r+0x24>
 8004924:	f000 f858 	bl	80049d8 <_free_r>
 8004928:	2400      	movs	r4, #0
 800492a:	4620      	mov	r0, r4
 800492c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004930:	f000 f89c 	bl	8004a6c <_malloc_usable_size_r>
 8004934:	4285      	cmp	r5, r0
 8004936:	4606      	mov	r6, r0
 8004938:	d802      	bhi.n	8004940 <_realloc_r+0x34>
 800493a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800493e:	d8f4      	bhi.n	800492a <_realloc_r+0x1e>
 8004940:	4629      	mov	r1, r5
 8004942:	4640      	mov	r0, r8
 8004944:	f7ff fdc8 	bl	80044d8 <_malloc_r>
 8004948:	4607      	mov	r7, r0
 800494a:	2800      	cmp	r0, #0
 800494c:	d0ec      	beq.n	8004928 <_realloc_r+0x1c>
 800494e:	42b5      	cmp	r5, r6
 8004950:	462a      	mov	r2, r5
 8004952:	4621      	mov	r1, r4
 8004954:	bf28      	it	cs
 8004956:	4632      	movcs	r2, r6
 8004958:	f000 f830 	bl	80049bc <memcpy>
 800495c:	4621      	mov	r1, r4
 800495e:	4640      	mov	r0, r8
 8004960:	f000 f83a 	bl	80049d8 <_free_r>
 8004964:	463c      	mov	r4, r7
 8004966:	e7e0      	b.n	800492a <_realloc_r+0x1e>

08004968 <memmove>:
 8004968:	4288      	cmp	r0, r1
 800496a:	b510      	push	{r4, lr}
 800496c:	eb01 0402 	add.w	r4, r1, r2
 8004970:	d902      	bls.n	8004978 <memmove+0x10>
 8004972:	4284      	cmp	r4, r0
 8004974:	4623      	mov	r3, r4
 8004976:	d807      	bhi.n	8004988 <memmove+0x20>
 8004978:	1e43      	subs	r3, r0, #1
 800497a:	42a1      	cmp	r1, r4
 800497c:	d008      	beq.n	8004990 <memmove+0x28>
 800497e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004982:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004986:	e7f8      	b.n	800497a <memmove+0x12>
 8004988:	4402      	add	r2, r0
 800498a:	4601      	mov	r1, r0
 800498c:	428a      	cmp	r2, r1
 800498e:	d100      	bne.n	8004992 <memmove+0x2a>
 8004990:	bd10      	pop	{r4, pc}
 8004992:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004996:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800499a:	e7f7      	b.n	800498c <memmove+0x24>

0800499c <_sbrk_r>:
 800499c:	b538      	push	{r3, r4, r5, lr}
 800499e:	4d06      	ldr	r5, [pc, #24]	@ (80049b8 <_sbrk_r+0x1c>)
 80049a0:	2300      	movs	r3, #0
 80049a2:	4604      	mov	r4, r0
 80049a4:	4608      	mov	r0, r1
 80049a6:	602b      	str	r3, [r5, #0]
 80049a8:	f7fc fb4a 	bl	8001040 <_sbrk>
 80049ac:	1c43      	adds	r3, r0, #1
 80049ae:	d102      	bne.n	80049b6 <_sbrk_r+0x1a>
 80049b0:	682b      	ldr	r3, [r5, #0]
 80049b2:	b103      	cbz	r3, 80049b6 <_sbrk_r+0x1a>
 80049b4:	6023      	str	r3, [r4, #0]
 80049b6:	bd38      	pop	{r3, r4, r5, pc}
 80049b8:	200002b0 	.word	0x200002b0

080049bc <memcpy>:
 80049bc:	440a      	add	r2, r1
 80049be:	4291      	cmp	r1, r2
 80049c0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80049c4:	d100      	bne.n	80049c8 <memcpy+0xc>
 80049c6:	4770      	bx	lr
 80049c8:	b510      	push	{r4, lr}
 80049ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049d2:	4291      	cmp	r1, r2
 80049d4:	d1f9      	bne.n	80049ca <memcpy+0xe>
 80049d6:	bd10      	pop	{r4, pc}

080049d8 <_free_r>:
 80049d8:	b538      	push	{r3, r4, r5, lr}
 80049da:	4605      	mov	r5, r0
 80049dc:	2900      	cmp	r1, #0
 80049de:	d041      	beq.n	8004a64 <_free_r+0x8c>
 80049e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049e4:	1f0c      	subs	r4, r1, #4
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	bfb8      	it	lt
 80049ea:	18e4      	addlt	r4, r4, r3
 80049ec:	f7ff ff82 	bl	80048f4 <__malloc_lock>
 80049f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004a68 <_free_r+0x90>)
 80049f2:	6813      	ldr	r3, [r2, #0]
 80049f4:	b933      	cbnz	r3, 8004a04 <_free_r+0x2c>
 80049f6:	6063      	str	r3, [r4, #4]
 80049f8:	6014      	str	r4, [r2, #0]
 80049fa:	4628      	mov	r0, r5
 80049fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a00:	f7ff bf7e 	b.w	8004900 <__malloc_unlock>
 8004a04:	42a3      	cmp	r3, r4
 8004a06:	d908      	bls.n	8004a1a <_free_r+0x42>
 8004a08:	6820      	ldr	r0, [r4, #0]
 8004a0a:	1821      	adds	r1, r4, r0
 8004a0c:	428b      	cmp	r3, r1
 8004a0e:	bf01      	itttt	eq
 8004a10:	6819      	ldreq	r1, [r3, #0]
 8004a12:	685b      	ldreq	r3, [r3, #4]
 8004a14:	1809      	addeq	r1, r1, r0
 8004a16:	6021      	streq	r1, [r4, #0]
 8004a18:	e7ed      	b.n	80049f6 <_free_r+0x1e>
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	b10b      	cbz	r3, 8004a24 <_free_r+0x4c>
 8004a20:	42a3      	cmp	r3, r4
 8004a22:	d9fa      	bls.n	8004a1a <_free_r+0x42>
 8004a24:	6811      	ldr	r1, [r2, #0]
 8004a26:	1850      	adds	r0, r2, r1
 8004a28:	42a0      	cmp	r0, r4
 8004a2a:	d10b      	bne.n	8004a44 <_free_r+0x6c>
 8004a2c:	6820      	ldr	r0, [r4, #0]
 8004a2e:	4401      	add	r1, r0
 8004a30:	1850      	adds	r0, r2, r1
 8004a32:	4283      	cmp	r3, r0
 8004a34:	6011      	str	r1, [r2, #0]
 8004a36:	d1e0      	bne.n	80049fa <_free_r+0x22>
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	6053      	str	r3, [r2, #4]
 8004a3e:	4408      	add	r0, r1
 8004a40:	6010      	str	r0, [r2, #0]
 8004a42:	e7da      	b.n	80049fa <_free_r+0x22>
 8004a44:	d902      	bls.n	8004a4c <_free_r+0x74>
 8004a46:	230c      	movs	r3, #12
 8004a48:	602b      	str	r3, [r5, #0]
 8004a4a:	e7d6      	b.n	80049fa <_free_r+0x22>
 8004a4c:	6820      	ldr	r0, [r4, #0]
 8004a4e:	1821      	adds	r1, r4, r0
 8004a50:	428b      	cmp	r3, r1
 8004a52:	bf04      	itt	eq
 8004a54:	6819      	ldreq	r1, [r3, #0]
 8004a56:	685b      	ldreq	r3, [r3, #4]
 8004a58:	6063      	str	r3, [r4, #4]
 8004a5a:	bf04      	itt	eq
 8004a5c:	1809      	addeq	r1, r1, r0
 8004a5e:	6021      	streq	r1, [r4, #0]
 8004a60:	6054      	str	r4, [r2, #4]
 8004a62:	e7ca      	b.n	80049fa <_free_r+0x22>
 8004a64:	bd38      	pop	{r3, r4, r5, pc}
 8004a66:	bf00      	nop
 8004a68:	200002ac 	.word	0x200002ac

08004a6c <_malloc_usable_size_r>:
 8004a6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a70:	1f18      	subs	r0, r3, #4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	bfbc      	itt	lt
 8004a76:	580b      	ldrlt	r3, [r1, r0]
 8004a78:	18c0      	addlt	r0, r0, r3
 8004a7a:	4770      	bx	lr

08004a7c <_init>:
 8004a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7e:	bf00      	nop
 8004a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a82:	bc08      	pop	{r3}
 8004a84:	469e      	mov	lr, r3
 8004a86:	4770      	bx	lr

08004a88 <_fini>:
 8004a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8a:	bf00      	nop
 8004a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a8e:	bc08      	pop	{r3}
 8004a90:	469e      	mov	lr, r3
 8004a92:	4770      	bx	lr
